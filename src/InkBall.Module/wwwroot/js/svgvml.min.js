"use strict";let SVG=!1;const svgNS="http://www.w3.org/2000/svg";let $createOval,$createPolyline,$RemovePolyline,$RemoveOval,$createSVGVML,$createLine,svgAntialias=!1,cont=null;if(document.createElementNS){SVG=null!==document.createElementNS(svgNS,"svg").x}function hasDuplicates(t){return new Set(t).size!==t.length}function sortPointsClockwise(t){const e=t.reduce((t,{x:e,y:r})=>(t.x+=e,t.y+=r,t),{x:0,y:0});e.x/=t.length,e.y/=t.length;return t.map(({x:t,y:r})=>({x:t,y:r,angle:180*Math.atan2(r-e.y,t-e.x)/Math.PI})).sort((t,e)=>t.angle-e.angle)}SVG?($createSVGVML=function(t,e,r,s){return cont=document.createElementNS(svgNS,"svg"),e&&cont.setAttributeNS(null,"width",e),r&&cont.setAttributeNS(null,"height",r),t.appendChild(cont),svgAntialias=s,cont},$createLine=function(t,e,r){const s=document.createElementNS(svgNS,"line");return s.setAttribute("shape-rendering",svgAntialias?"auto":"optimizeSpeed"),s.setAttribute("stroke-width",Math.round(t)+"px"),e&&s.setAttribute("stroke",e),r&&s.setAttribute("stroke-linecap",r),s.$move=function(t,e,r,s){this.setAttribute("x1",t),this.setAttribute("y1",e),this.setAttribute("x2",r),this.setAttribute("y2",s)},s.$RGBcolor=function(t,e,r){this.setAttribute("stroke","rgb("+Math.round(t)+","+Math.round(e)+","+Math.round(r)+")")},s.$SetColor=function(t){this.setAttribute("stroke",t)},s.$strokeWidth=function(t){this.setAttribute("stroke-width",Math.round(t)+"px")},cont.appendChild(s),s},$createPolyline=function(t,e,r){const s=document.createElementNS(svgNS,"polyline");return s.setAttribute("shape-rendering",svgAntialias?"auto":"optimizeSpeed"),s.setAttribute("stroke-width",Math.round(t)),r&&s.setAttribute("stroke",r),s.setAttribute("fill",r),s.setAttribute("fill-opacity","0.1"),e&&s.setAttribute("points",e),s.setAttribute("stroke-linecap","round"),s.setAttribute("stroke-linejoin","round"),cont.appendChild(s),s.setAttribute("data-id",0),s.$AppendPoints=function(t,e,r,s){const i=this.getAttribute("points"),o=i.split(" ");if(!0===hasDuplicates(o))return!1;let n;if(o.length<=1||2!==(n=o[o.length-1].split(",")).length)return!1;const a=parseInt(n[0]),u=parseInt(n[1]),h=parseInt(t),l=parseInt(e);return Math.abs(a-h)<=r&&Math.abs(u-l)<=s&&(this.setAttribute("points",i+` ${t},${e}`),!0)},s.$RemoveLastPoint=function(){const t=this.getAttribute("points").replace(/(\s\d+,\d+)$/,"");return this.setAttribute("points",t),t},s.$ContainsPoint=function(t,e){const r=new RegExp(`${t},${e}`,"g");return(this.getAttribute("points").match(r)||[]).length},s.$GetPointsString=function(){return this.getAttribute("points")},s.$GetPointsArray=function(){return this.getAttribute("points").split(" ").map((function(t){const e=t.split(",");return{x:parseInt(e[0]),y:parseInt(e[1])}}))},s.$SetPoints=function(t){this.setAttribute("points",t)},s.$GetIsClosed=function(){const t=this.getAttribute("points").split(" ");return t[0]===t[t.length-1]},s.$GetLength=function(){return this.getAttribute("points").split(" ").length},s.$SetWidthAndColor=function(t,e){this.setAttribute("stroke",e),this.setAttribute("fill",e),this.setAttribute("stroke-width",Math.round(t))},s.$GetID=function(){return parseInt(this.getAttribute("data-id"))},s.$SetID=function(t){this.setAttribute("data-id",t)},s.$GetFillColor=function(){return this.getAttribute("fill")},s},$createOval=function(t){const e=document.createElementNS(svgNS,"circle");return e.setAttribute("shape-rendering",svgAntialias?"auto":"optimizeSpeed"),e.setAttribute("stroke-width",0),e.setAttribute("r",Math.round(t>>1)),e.setAttribute("data-status",-1),e.$move=function(t,e,r){this.setAttribute("cx",t),this.setAttribute("cy",e),this.setAttribute("r",Math.round(r))},e.$GetStrokeColor=function(){return this.getAttribute("stroke")},e.$SetStrokeColor=function(t){this.setAttribute("stroke",t)},e.$GetPosition=function(){return{x:this.getAttribute("cx"),y:this.getAttribute("cy")}},e.$GetFillColor=function(){return this.getAttribute("fill")},e.$SetFillColor=function(t){this.setAttribute("fill",t)},e.$GetStatus=function(){return parseInt(this.getAttribute("data-status"))},e.$SetStatus=function(t,e=!1){if(e){const e=parseInt(this.getAttribute("data-status"));this.setAttribute("data-status",t),-1!==e&&e!==t&&this.setAttribute("data-old-status",e)}else this.setAttribute("data-status",t)},e.$RevertOldStatus=function(){const t=this.getAttribute("data-old-status");return t?(this.removeAttribute("data-old-status"),this.setAttribute("data-status",t),parseInt(t)):-1},e.$GetZIndex=function(){return this.getAttribute("z-index")},e.$SetZIndex=function(t){this.setAttribute("z-index",t)},e.$Hide=function(){this.setAttribute("visibility","hidden")},e.$Show=function(){this.setAttribute("visibility","visible")},e.$strokeWeight=function(t){this.setAttribute("stroke-width",t)},cont.appendChild(e),e},$RemoveOval=function(t){cont.removeChild(t)},$RemovePolyline=function(t){cont.removeChild(t)}):$createSVGVML=function(){return alert("SVG is not supported!"),!1};class GameStateStore{constructor(t=!0,e,r,s){this.DB_NAME="InkballGame",this.DB_POINT_STORE="points",this.DB_PATH_STORE="paths",this.DB_STATE_STORE="state",this.DB_VERSION=2,this.g_DB,t?"indexedDB"in window?(this.PointStore=new IDBPointStore(this,e,s),this.PathStore=new IDBPathStore(this,r,s)):(console.log("This browser doesn't support IndexedDB"),this.PointStore=new SimplePointStore,this.PathStore=new SimplePathStore):(this.PointStore=new SimplePointStore,this.PathStore=new SimplePathStore)}GetPointStore(){return this.PointStore}GetPathStore(){return this.PathStore}async OpenDb(){return console.log("OpenDb ..."),new Promise((t,e)=>{const r=indexedDB.open(this.DB_NAME,this.DB_VERSION);r.onsuccess=function(e){this.g_DB=e.currentTarget.result,console.log("OpenDb DONE"),t(e.currentTarget.result)}.bind(this),r.onerror=function(t){console.error("OpenDb:",t.target.errorCode),e()},r.onupgradeneeded=function(t){console.log("OpenDb.onupgradeneeded");const e=Array.from(t.currentTarget.result.objectStoreNames);e.includes(this.DB_POINT_STORE)&&t.currentTarget.result.deleteObjectStore(this.DB_POINT_STORE),e.includes(this.DB_PATH_STORE)&&t.currentTarget.result.deleteObjectStore(this.DB_PATH_STORE),e.includes(this.DB_STATE_STORE)&&t.currentTarget.result.deleteObjectStore(this.DB_STATE_STORE);t.currentTarget.result.createObjectStore(this.DB_POINT_STORE,{autoIncrement:!1}),t.currentTarget.result.createObjectStore(this.DB_PATH_STORE,{autoIncrement:!1}),t.currentTarget.result.createObjectStore(this.DB_STATE_STORE,{autoIncrement:!1})}.bind(this)})}GetObjectStore(t,e){if(this.bulkStores&&this.bulkStores.has(t))return this.bulkStores.get(t);return this.g_DB.transaction(t,e).objectStore(t)}async ClearObjectStore(t){return new Promise((e,r)=>{const s=this.GetObjectStore(t,"readwrite").clear();s.onsuccess=function(){e()},s.onerror=function(t){console.error("clearObjectStore:",t.target.errorCode),r()}})}async GetPoint(t){return new Promise((e,r)=>{const s=this.GetObjectStore(this.DB_POINT_STORE,"readonly").get(t);s.onerror=function(t){r(new Error("GetPoint => "+t))},s.onsuccess=function(t){e(t.target.result)}})}async GetAllPoints(){return new Promise((t,e)=>{const r=this.GetObjectStore(this.DB_POINT_STORE,"readonly"),s=[],i=r.openCursor();i.onsuccess=function(e){const r=e.target.result;r?(s.push(r.value),r.continue()):t(s)},i.onerror=function(t){e(new Error("GetAllPoints => "+t))}})}async GetState(t){return new Promise((e,r)=>{const s=this.GetObjectStore(this.DB_STATE_STORE,"readonly").get(t);s.onerror=function(t){r(new Error("GetState => "+t))},s.onsuccess=function(t){e(t.target.result)}})}async GetPath(t){return new Promise((e,r)=>{const s=this.GetObjectStore(this.DB_PATH_STORE,"readonly").get(t);s.onerror=function(t){r(new Error("GetPath => "+t))},s.onsuccess=function(t){e(t.target.result)}})}async GetAllPaths(){return new Promise((t,e)=>{const r=this.GetObjectStore(this.DB_PATH_STORE,"readonly"),s=[],i=r.openCursor();i.onsuccess=function(e){const r=e.target.result;r?(s.push(r.value),r.continue()):t(s)},i.onerror=function(t){e(new Error("GetAllPaths => "+t))}})}async StorePoint(t,e){return this.bulkStores&&this.bulkStores.has(this.DB_POINT_STORE)?(this.bulkBuffer||(this.bulkBuffer=new Map),this.bulkBuffer.set(t,e),Promise.resolve()):new Promise((r,s)=>{const i=this.GetObjectStore(this.DB_POINT_STORE,"readwrite");let o;try{o=i.add(e,t)}catch(t){throw"DataCloneError"===t.name&&console.error("This engine doesn't know how to clone a Blob, use Firefox"),t}o.onsuccess=function(){r()},o.onerror=function(){console.error("StorePoint error",this.error),s()}})}async StoreAllPoints(t){return t||(t=this.bulkBuffer),t&&this.bulkStores?new Promise((e,r)=>{const s=this.GetObjectStore(this.DB_POINT_STORE,"readwrite");try{t.forEach((function(t,e){s.add(t,e)})),this.bulkBuffer=null,e()}catch(t){console.error("This engine doesn't know how to clone a Blob, use Firefox"),r(t)}}):Promise.reject()}async StoreState(t,e){return new Promise((r,s)=>{const i=this.GetObjectStore(this.DB_STATE_STORE,"readwrite");let o;try{o=i.add(e,t)}catch(t){throw"DataCloneError"===t.name&&console.error("This engine doesn't know how to clone a Blob, use Firefox"),t}o.onsuccess=function(){r()},o.onerror=function(){console.error("StoreState error",this.error),s()}})}async UpdateState(t,e){return new Promise((r,s)=>{const i=this.GetObjectStore(this.DB_STATE_STORE,"readwrite");let o;try{o=i.put(e,t)}catch(t){throw"DataCloneError"===t.name&&console.error("This engine doesn't know how to clone a Blob, use Firefox"),t}o.onsuccess=function(){r()},o.onerror=function(){console.error("UpdateState error",this.error),s()}})}async StorePath(t,e){return new Promise((r,s)=>{const i=this.GetObjectStore(this.DB_PATH_STORE,"readwrite");let o;try{o=i.add(e,t)}catch(t){throw"DataCloneError"===t.name&&console.error("This engine doesn't know how to clone a Blob, use Firefox"),t}o.onsuccess=function(){r()},o.onerror=function(){console.error("StorePath error",this.error),s()}})}async PrepareStore(){if(!this.PointStore.GetAllPoints)return!1;if(this.g_DB)return!1;await this.OpenDb();const t=this.PointStore.GetGameStateCallback(),e=await this.GetState(t.iGameID);if(!e)return await Promise.all([this.ClearObjectStore(this.DB_POINT_STORE),this.ClearObjectStore(this.DB_PATH_STORE),this.ClearObjectStore(this.DB_STATE_STORE)]),await this.StoreState(t.iGameID,t),!1;if(e.sLastMoveGameTimeStamp!==t.sLastMoveGameTimeStamp)return await Promise.all([this.ClearObjectStore(this.DB_POINT_STORE),this.ClearObjectStore(this.DB_PATH_STORE),this.ClearObjectStore(this.DB_STATE_STORE)]),!1;if(!1===t.bPointsAndPathsLoaded)try{return await this.BeginBulkStorage([this.DB_POINT_STORE,this.DB_PATH_STORE],"readonly"),!0===await this.PointStore.PrepareStore()&&!0===await this.PathStore.PrepareStore()||(await Promise.all([this.ClearObjectStore(this.DB_POINT_STORE),this.ClearObjectStore(this.DB_PATH_STORE),this.ClearObjectStore(this.DB_STATE_STORE)]),!1)}finally{await this.EndBulkStorage([this.DB_POINT_STORE,this.DB_PATH_STORE])}}async BeginBulkStorage(t,e){this.bulkStores||(this.bulkStores=new Map);const r=t;if(!this.bulkStores.has(r)){const s=this.g_DB.transaction(t,e);Array.isArray(t)?(this.bulkStores.set(r[0],s.objectStore(t[0])),this.bulkStores.set(r[1],s.objectStore(t[1]))):this.bulkStores.set(r,s.objectStore(t))}}async EndBulkStorage(t){this.bulkStores&&(Array.isArray(t)?(this.bulkStores.delete(t[0]),this.bulkStores.delete(t[1])):this.bulkStores.delete(t),this.bulkStores.size<=0&&(this.bulkStores=null))}}class SimplePointStore{constructor(){this.store=new Map}async PrepareStore(){return!0}async BeginBulkStorage(){}async EndBulkStorage(){}async has(t){return this.store.has(t)}async set(t,e){return this.store.set(t,e)}async get(t){return this.store.get(t)}async values(){return this.store.values()}}class IDBPointStore extends SimplePointStore{constructor(t,e,r){super(),this.MainGameStateStore=t,this.GetPoint=t.GetPoint.bind(this.MainGameStateStore),this.StorePoint=t.StorePoint.bind(this.MainGameStateStore),this.GetAllPoints=t.GetAllPoints.bind(this.MainGameStateStore),this.UpdateState=t.UpdateState.bind(this.MainGameStateStore),this.PointCreationCallback=e,this.GetGameStateCallback=r}async PrepareStore(){if(this.PointCreationCallback&&this.GetGameStateCallback){const t=await this.GetAllPoints(),e=this.GetGameStateCallback();for(const r of t){const t=await this.PointCreationCallback(r.x,r.y,r.Status,r.Color),s=r.y*e.iGridWidth+r.x;this.store.set(s,t)}return!0}}async BeginBulkStorage(){await this.MainGameStateStore.BeginBulkStorage(this.MainGameStateStore.DB_POINT_STORE,"readwrite")}async EndBulkStorage(){await this.MainGameStateStore.StoreAllPoints(),await this.MainGameStateStore.EndBulkStorage(this.MainGameStateStore.DB_POINT_STORE)}async has(t){return this.store.has(t)}async set(t,e){const r=this.GetGameStateCallback(),s=e.$GetPosition(),i=e.$GetFillColor(),o={x:parseInt(s.x)/r.iGridSizeX,y:parseInt(s.y)/r.iGridSizeY,Status:e.$GetStatus(),Color:i};return await this.StorePoint(t,o),this.UpdateState&&!0===r.bPointsAndPathsLoaded&&await this.UpdateState(r.iGameID,r),this.store.set(t,e)}async get(t){let e=this.store.get(t);if(!e){const r=await this.GetPoint(t);return r&&this.PointCreationCallback?(e=this.PointCreationCallback(r.x,r.y,r.Status,r.Color),this.store.set(t,e),e):void 0}return e}async values(){let t=this.store.values();return t||(t=await this.GetAllPoints(),t)}}class SimplePathStore{constructor(){this.store=[]}async PrepareStore(){return!0}async BeginBulkStorage(){}async EndBulkStorage(){}async push(t){return this.store.push(t)}async all(){return this.store}}class IDBPathStore extends SimplePathStore{constructor(t,e,r){super(),this.MainGameStateStore=t,this.GetAllPaths=t.GetAllPaths.bind(this.MainGameStateStore),this.StorePath=t.StorePath.bind(this.MainGameStateStore),this.UpdateState=t.UpdateState.bind(this.MainGameStateStore),this.PathCreationCallback=e,this.GetGameStateCallback=r}async PrepareStore(){if(this.PathCreationCallback){const t=await this.GetAllPaths();for(const e of t){const t=await this.PathCreationCallback(e.PointsAsString,e.Color,e.iId);this.store.push(t)}}return!0}async BeginBulkStorage(){await this.MainGameStateStore.BeginBulkStorage([this.MainGameStateStore.DB_POINT_STORE,this.MainGameStateStore.DB_PATH_STORE],"readwrite")}async EndBulkStorage(){await this.MainGameStateStore.EndBulkStorage([this.MainGameStateStore.DB_POINT_STORE,this.MainGameStateStore.DB_PATH_STORE])}async push(t){const e=t.$GetID(),r={iId:e,Color:t.$GetFillColor(),PointsAsString:t.$GetPointsString()};if(await this.StorePath(e,r),this.UpdateState){const t=this.GetGameStateCallback();!0===t.bPointsAndPathsLoaded&&await this.UpdateState(t.iGameID,t)}return this.store.push(t)}async all(){let t=this.store;return t||(t=await this.GetAllPaths(),t)}}export{$createOval,$createPolyline,$RemovePolyline,$RemoveOval,$createSVGVML,$createLine,hasDuplicates,sortPointsClockwise,GameStateStore};