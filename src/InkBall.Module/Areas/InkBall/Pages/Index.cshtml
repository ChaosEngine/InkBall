@page
@inject Microsoft.AspNetCore.Hosting.IHostingEnvironment env
@inject Microsoft.Extensions.Options.IOptions<InkBallOptions> commonUIConfigureOptions
@model IndexModel
@{
	ViewData["Title"] = "Index";

	DefineSection(commonUIConfigureOptions.Value.HeadElementsSectionName, async () =>
	{
		WriteLiteral($"<link rel='stylesheet' href='{Url.Content("~/css/inkball.css")}' />");
	});
}
<h1>
	This is from @(typeof(IndexModel).FullName)
</h1>
<p class="blue-paragraph">
	I amd SOO BLUEEEE
</p>
<p>
	<img src="~/img/image.png" alt="image" />
</p>

<span id="debug0"></span>
<span id="debug1"></span>
<span id="debug2"></span>
<div class="buttony">
	<form action="Games" method="post" asp-antiforgery="true">
		<input type='hidden' name='GameID' value='@Model.Game.iId' class='gameidbutton' />
		<input type='submit' name='action' value='pause' class='btn btn-outline-primary' />
		<input id='SurrenderButton' type='submit' name='action'

			@if(Model.Game.Player2 != null)
			{
				if(Model.Game.GetOtherPlayer().IsLastMoveOverdue() && Model.Game.IsThisPlayerActive())
				{
					@:value='win'
				}
				else
				{
					@:value='surrender'
				}
			}
			else
			{
				@:value='cancel'
			}

		class='btn btn-outline-primary' />
	</form>
</div>
<br />

<div class="container">
	<div class="row">&nbsp;</div>
	<div class="row">
		<div class="col-8">
			<div id="screen" style="width:@(Model.Game.iBoardWidth)px; height:@(Model.Game.iBoardHeight)px; border:1px solid red; background-image:url('../img/plansza1.gif')">
			</div>
		</div>
		<div class="col-4">
			<div class="input-group">
				<input id="messageInput" type="text" class="form-control" placeholder="Message..." aria-label="Message to send" aria-describedby="sendButton" />
				<div class="input-group-append">
					<input id="sendButton" type="button" value="Send Message" class="btn btn-outline-secondary" />
				</div>
			</div>
			<hr />
			<ul id="messagesList" style="overflow:auto;height:50%"></ul>
		</div>
	</div>
</div>



@{
	DefineSection(commonUIConfigureOptions.Value.ScriptsSectionName, async () =>
	{
		WriteLiteral(
			(env.IsDevelopment() ?
			$"<script src='{Url.Content("~/lib/signalr/dist/browser/signalr.js")}'></script>\r" +
			$"<script src='{Url.Content("~/lib/msgpack5/dist/msgpack5.js")}'></script>\r" +
			$"<script src='{Url.Content("~/lib/signalr-protocol-msgpack/dist/browser/signalr-protocol-msgpack.js")}'></script>\r"
			:
			@"<script src='https://cdn.jsdelivr.net/npm/@aspnet/signalr@1.1.0/dist/browser/signalr.min.js' integrity='sha256-QMSkR/7232j790y/zuvuopBbJS14B9e4hLLuz7KC9Fk=' crossorigin='anonymous'></script>
			<script src='https://cdn.jsdelivr.net/npm/msgpack5@4.2.1/dist/msgpack5.min.js' integrity='sha256-mY/RhkCJfd98j3c5s1EcUDJdRzffTeKzEzFIaI/2KQg=' crossorigin='anonymous'></script>
			<script src='https://cdn.jsdelivr.net/npm/@aspnet/signalr-protocol-msgpack@1.1.0/dist/browser/signalr-protocol-msgpack.min.js' integrity='sha256-/nN8c30tnA8AmQMPV0efnlYrEOhPNNo7v4Y6JgHSPac=' crossorigin='anonymous'></script>") +


			$"<script type='text/javascript' src='{Url.Content("~/js/svgvml.js")}'></script>\r" +
			

			@"<script type='text/javascript'>
				var ie = !(navigator.userAgent.indexOf('Trident') < 0);
				if(ie == false) {
					document.write(""<script src='" + (env.IsDevelopment() ? Url.Content("~/js/inkball.js") : Url.Content("~/js/inkball.min.js")) + @"'></scr""+""ipt>"");
				} else {
					document.write(""<script src='https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.0.0-beta.3/polyfill.min.js' integrity='sha256-L8MORrEU27Ep+vSMEvACaPFX68pNXK+LXb+EBqnzFK4=' crossorigin='anonymous'></scr""+""ipt>"");
					document.write(""<script src='" + Url.Content("~/js/inkball.babelify.js") + @"'></scr""+""ipt>"");
				}


				$(document).ready(function () {
					//alert('a QQ');
					$('.blue-paragraph').css('color', 'blue');

					var inkBallHubName = '" + commonUIConfigureOptions.Value.AppRootPath + InkBall.Module.Hubs.ChatHub.HubName + @"';
					var iGameID = " + Model.Game.iId + @";
					var iPlayerID = " + Model.Player.iId + @";

					BuildSignalR(inkBallHubName, signalR.LogLevel.Warning,
						//new signalR.protocols.msgpack.MessagePackHubProtocol()
						new signalR.JsonHubProtocol(),
						signalR.HttpTransportType.None,
						function() {
							return 'iGameID=' + iGameID;
						}
					);
					StartSignalRConnection(iGameID, iPlayerID);
				});
			</script>"
		);
	});
}