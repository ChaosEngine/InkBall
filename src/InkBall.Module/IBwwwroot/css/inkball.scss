@charset "UTF-8";
@import "svg-url";

/**********inkgame*********/
h3.inkgame {
	color: darkorange;
}

p.inkgame {
	margin-bottom: 0.3em;
}

@mixin background($cellWidth, $cellHeight, $fill, $stroke) {
	//https://codepen.io/jakob-e/pen/doMoML processed SVG
	background-image: svg-url('<svg xmlns="http://www.w3.org/2000/svg"><defs><pattern id="grid" width="#{$cellWidth}" height="#{$cellHeight}" patternUnits="userSpaceOnUse"><rect width="#{$cellWidth}" height="#{$cellHeight}" fill="#{$fill}" stroke="#{$stroke}" stroke-width="0.25"/></pattern></defs><rect width="100%" height="100%" fill="url(#grid)" /></svg>');
}

@mixin baseBoard($width, $height, $cellWidth, $cellHeight) {
	width: calc(#{$cellWidth} * #{$width} * 1);
	height: calc(#{$cellHeight} * #{$height} * 1);
	max-width: calc(#{$cellWidth} * #{$width} * 1);
	max-height: calc(#{$cellHeight} * #{$height} * 1);
}

@mixin board($parent, $width, $height, $cellWidth: 1em, $cellHeight: 1em) {
	#{$parent}-#{$width}x#{$height} {
		@include baseBoard(#{$width}, #{$height}, #{$cellWidth}, #{$cellHeight});
	}
}

@mixin irregularBoard($parent, $width, $height, $cellWidth: 15px, $cellHeight: 1em, $fill, $stroke) {
	#{$parent}-#{$width}x#{$height} {
		@include background(15, 16, $fill, $stroke);
		background-size: calc(#{$cellWidth} * 5) calc(#{$cellHeight} * 5);
		@include baseBoard(#{$width}, #{$height}, #{$cellWidth}, #{$cellHeight});
	}
}

.inkgame {
	div#status span {
		vertical-align: middle;
		display: inline-block;
		line-height: 1em;

		&#gameStatus {
			font-size: 2em;
			vertical-align: middle;
			display: inline-block;
			line-height: 1em;
		}
	}

	--redish: red;
	--bluish: blue;
	--owned_by_red: #DC143C;
	--owned_by_blue: #8A2BE2;
	--point_radius: 0.25px;

	@media (prefers-color-scheme: light) {
		--path_draw: black;

		.boardsize-20x26, .boardsize-40x52, .boardsize-64x64 {
			@include background(16, 16, 'none', 'gray');
			background-size: 1em 1em;
		}
	}
	@media (prefers-color-scheme: dark) {
		--path_draw: white;

		.boardsize-20x26, .boardsize-40x52, .boardsize-64x64 {
			@include background(16, 16, 'black', 'white');
			background-size: 1em 1em;
		}
	}

	& svg#screen {
		border: 1px solid red;
		/* font-size: 32px; */
		box-sizing: content-box;
		user-select: none;
	}

	ul#messagesList {
		overflow: auto;
		height: calc(26em * 1);

		li {
			list-style-type: none;
			& span.blue {
				background-color: #6495ed4f;
			}
			& span.red {
				background-color: #ff45004f;
			}
		}
	}
}

svg {
	&>circle {
		///
		/// Those r: XXX need to go along with package.json overrides for gulp-clean-css to use clean-css: >5* version
		/// https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides
		/// "overrides": {
		/// 	"clean-css": "5.3.1"
		/// }
		///
		&[data-status="POINT_FREE_RED"] {
			fill: var(--redish);
			r: var(--point_radius);
		}

		&[data-status="POINT_FREE_BLUE"] {
			fill: var(--bluish);
			r: var(--point_radius);
		}

		&[data-status="POINT_OWNED_BY_RED"] {
			// fill: lightskyblue;
			fill: var(--owned_by_red);
			r: var(--point_radius);
		}

		&[data-status="POINT_OWNED_BY_BLUE"] {
			// fill: lightpink;
			fill: var(--owned_by_blue);
			r: var(--point_radius);
		}

		&[data-status="POINT_IN_PATH"] {
			// fill: lightgray;
			r: var(--point_radius);
		}

		&[data-status="POINT_STARTING"] {
			fill: yellow;
			r: 0.5px;
		}
		
		//mouse pointer/cursor style
		&[data-status="MOUSE_POINTER"] {
			/* fill: transparent; */
			stroke: rgba(128, 255, 0, 0.5);
			stroke-width: 0.06em;
			r: var(--point_radius);
		}

		//test points
		// &[data-status="POINT_FREE"] {
		// 	// fill: transparent;
		// 	// stroke: gray;
		// 	stroke-width: 0.1em;
		// }
	}

	&>polyline {
		stroke-width: 0.1875px;
		fill-opacity: 0.1;
		stroke-linecap: round;
		stroke-linejoin: round;
	}
}

@include board('.boardsize', 20, 26);

@include board('.boardsize', 40, 52);

// @media (prefers-color-scheme: light) {
// 	@include irregularBoard('.boardsize', 64, 64, 'none', 'gray');
// }
// @media (prefers-color-scheme: dark) {
// 	@include irregularBoard('.boardsize', 64, 64, 'black', 'white');
// }
@include board('.boardsize', 64, 64);

[data-otherplayerid="-1"], [data-otherplayerid=""] {
	display: none;
}

/**********inkgames(list)*********/
.inkgames {
	.table-responsive {
		overflow-y: auto;
		max-height: 75vh;
	}
	tr {
		vertical-align: middle;
	}
	td.gtd-nogame > span {
		animation: UpDown 2s cubic-bezier(0.4, 0, 0.2, 1) 3 normal;
		position: relative;
	}
	@keyframes UpDown {
		0%, 100% {
			bottom: 0;
		}
		50% {
			bottom: 0.25em;
		}
	}
	@media (prefers-color-scheme: light) {
		.gtd-nogame {
			color: rgb(230, 171, 20);
			background-color: beige;
		}
	}
	@media (prefers-color-scheme: dark) {
		.gtd-nogame {
			color: beige;
			background-color: rgb(51, 43, 36);
		}
	}
}
/**********inkstats*********/
.inkstats .grid-striped .row:nth-of-type(odd) {
	background-color: rgba(0, 0, 0, .05);
}