@page
@using Microsoft.Extensions.Hosting
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@inject Microsoft.Extensions.Options.IOptions<InkBallOptions> commonUIConfigureOptions
@model IndexModel
@{
    ViewData["Title"] = "Game";

    if (!string.IsNullOrEmpty(commonUIConfigureOptions.Value.HeadElementsSectionName))
    {
        DefineSection(commonUIConfigureOptions.Value.HeadElementsSectionName, async () =>
        {
            WriteLiteral($"<link rel='stylesheet' href='{Url.Content(Constants.WwwIncludeCSS)}' />");
        });
    }


    string P2Name = Model.Game.Player2 != null ? Model.Game.Player2?.User?.UserName : "???";
    string surrender_win_cancel_name;
	bool isThisPlayerActive = Model.Game.IsThisPlayerActive();
	bool useMessagePackBinaryTransport = commonUIConfigureOptions.Value.UseMessagePackBinaryTransport;
    if(Model.Game.Player2 != null)
    {
        if(Model.Game.GetOtherPlayer().IsLastMoveOverdue() && isThisPlayerActive)
        {
            surrender_win_cancel_name = "win";
        }
        else
        {
            surrender_win_cancel_name = "surrender";
        }
    }
    else
    {
        surrender_win_cancel_name = "cancel";
    }
}
<h3 class="inkgame">
	This is Inball Game page
</h3>
<p class="inkgame">
	<!-- Debug State -->
	iGameID=<span id="gameID"></span>
	iPlayerID=<span id="playerID"></span>
	Player=@(Model.Game.IsThisPlayer1() ? "P1" : "P2")
	<span class="whichColor">Play color</span>
</p>
<p class="inkgame">
@Model.Game.Player1?.User?.UserName vs <span id='Player2Name'>@P2Name</span>
</p>
<div class="container inkgame">
	<form action="Games" method="post" asp-antiforgery="true" class="row">
		<input type='hidden' name='GameID' />
		<div class="col-xs-6 col-sm-auto pl-0">
			<a id='Pause' href='Games' class="btn btn-outline-primary">pause</a>
			<input id='SurrenderButton' type='submit' name='action' value="@surrender_win_cancel_name" class='btn btn-outline-primary' disabled />
		</div>
		<div class="col-xs-6 col-sm-auto pl-0">
			<input id="StopAndDraw" type="button" value="Stop and Draw" class='btn btn-warning' disabled />
			<input id="CancelPath" type="button" value="Cancel path" class='btn btn-primary' disabled />
		</div>
	</form>
	<div id="status" class="row">
		<div class="col-auto px-0">
			<span id="gameStatus">•</span>&nbsp;
			<span id="debug0"></span>&nbsp;
			<span id="debug1"></span>&nbsp;
			<span id="debug2"></span>
		</div>
	</div>
	<div class="row">
		<div id="screen" class="col-sm-auto p-0">
		</div>
		<div class="col pt-3 pt-md-0">
			<div class="input-group">
				<input id="messageInput" type="text" class="form-control" placeholder="Message..." aria-label="Message to send" aria-describedby="sendButton"
					onkeyup="document.querySelector('#sendButton').disabled = this.value == ''" disabled />
				<div class="input-group-append">
					<input id="sendButton" type="button" value="Send Message" class="btn btn-secondary" disabled />
				</div>
			</div>
			<ul id="messagesList" class="list-group list-group-flush"></ul>
		</div>
	</div>
</div>


<script type='text/javascript'>
"use strict";
	var game = null;

	window.addEventListener('load', function() {
		const inkBallHubName = '@(commonUIConfigureOptions.Value.AppRootPath + InkBall.Module.Hubs.GameHub.HubName)';
		const iGameID = @Model.Game.iId;
		document.getElementById('gameID').innerHTML = iGameID;
		document.querySelector(".container .inkgame form > input[type='hidden'][name='GameID']").value = iGameID;
		const iPlayerID = @Model.Player.iId;
		const iOtherPlayerID = parseInt("@Model.Game.GetOtherPlayer()?.iId") || null;
		document.getElementById('playerID').innerHTML = iPlayerID;
		const boardSize = { width: @Model.Game.iBoardWidth, height: @Model.Game.iBoardHeight };
		const bPlayingWithRed = JSON.parse('@Model.Game.IsThisPlayerPlayingWithRed()'.toLowerCase());
		const bPlayerActive = JSON.parse('@isThisPlayerActive'.toLowerCase());
		const gameType = '@Model.Game.GameType';
		const protocol = JSON.parse('@useMessagePackBinaryTransport'.toLowerCase()) ? new signalR.protocols.msgpack.MessagePackHubProtocol() : new signalR.JsonHubProtocol();
		const servTimeoutMillis = @Model.ClientTimeoutInterval.TotalMilliseconds;
		const isReadonly = JSON.parse('@Model.IsReadonly'.toLowerCase());
		const pathAfterPointDrawAllowanceSecAmount = @Constants.PathAfterPointDrawAllowanceSecAmount;
		game = new InkBallGame(inkBallHubName, signalR.LogLevel.Warning, protocol, signalR.HttpTransportType.None, servTimeoutMillis,
			function () {
				return 'iGameID=' + iGameID + '&iPlayerID=' + iPlayerID;
			},
			gameType, bPlayingWithRed, bPlayerActive, boardSize, isReadonly, pathAfterPointDrawAllowanceSecAmount
		);

		@if(Model.PlayerPointsAndPaths.Points != null)
		{
		@:const loadPointsAndPathsFromSignalR = false;
		@:game.StartSignalRConnection(iGameID, iPlayerID, iOtherPlayerID, loadPointsAndPathsFromSignalR, '#messagesList', '#sendButton', '#messageInput');
		@:game.PrepareDrawing('#screen', '#Player2Name', '#gameStatus', '#SurrenderButton', '#CancelPath', '#Pause', '#StopAndDraw');

		@:game.SetAllPoints(@Model.PointsAsJavaScriptArray);
		@:game.SetAllPaths2(@Model.PathsAsJavaScriptArray);
		}
		else
		{
		@:const loadPointsAndPathsFromSignalR = true;
		@:game.StartSignalRConnection(iGameID, iPlayerID, iOtherPlayerID, loadPointsAndPathsFromSignalR, '#messagesList', '#sendButton', '#messageInput');
		@:game.PrepareDrawing('#screen', '#Player2Name', '#gameStatus', '#SurrenderButton', '#CancelPath', '#Pause', '#StopAndDraw');
		}
		
		//alert('a QQ');
		document.getElementsByClassName('whichColor')[0].style.color = bPlayingWithRed ? "red" : "blue";
		CountPointsDebug("#debug2");
	});

	window.addEventListener('beforeunload', function (e) {
		game.StopSignalRConnection();
	});
</script>
@{
    if (!string.IsNullOrEmpty(commonUIConfigureOptions.Value.ScriptsSectionName))
    {
        DefineSection(commonUIConfigureOptions.Value.ScriptsSectionName, async () =>
        {
            WriteLiteral(
                (
				env.IsDevelopment() ?
                $"<script src='{Url.Content("~/lib/signalr/dist/browser/signalr.js")}'></script>\r" +
                (useMessagePackBinaryTransport ? $"<script src='{Url.Content("~/lib/msgpack5/dist/msgpack5.js")}'></script>\r" +
                $"<script src='{Url.Content("~/lib/signalr-protocol-msgpack/dist/browser/signalr-protocol-msgpack.js")}'></script>\r" : "\r")                
                :
                @"<script src='https://cdn.jsdelivr.net/npm/@microsoft/signalr@3.1.2/dist/browser/signalr.min.js' integrity='sha256-U2Y2nhPBXhHRC7Q5yYBcnAed6cVvt+50CZecIGGM4H8=' crossorigin='anonymous'></script>" +
                (useMessagePackBinaryTransport ? @"<script src='https://cdn.jsdelivr.net/npm/msgpack5@4.2.1/dist/msgpack5.min.js' integrity='sha256-mY/RhkCJfd98j3c5s1EcUDJdRzffTeKzEzFIaI/2KQg=' crossorigin='anonymous'></script>
				<script src='https://cdn.jsdelivr.net/npm/@microsoft/signalr-protocol-msgpack@3.1.2/dist/browser/signalr-protocol-msgpack.min.js' integrity='sha256-j9ZNe+f4jHS70jjSCfFXQTrcpd+oqbMGu7WsnVY/fZs=' crossorigin='anonymous'></script>" : "")
				) +


                @"<script type='text/javascript'>
				const doPolyfill = JSON.parse('" + commonUIConfigureOptions.Value.EnablePolyfill + @"'.toLowerCase());
				const notIE11 = navigator.userAgent.indexOf('Trident') < 0;
				if(!doPolyfill || notIE11) {
					document.write(""<script async src='" + Url.Content(Constants.WwwIncludeInkballJS) + @"'><\/script>"" +
					""<script async src='" + Url.Content(Constants.WwwIncludeSvgVmlJS) + @"'><\/script>"");
				} else {
					document.write(""<script src='https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.8.3/polyfill.min.js' integrity='sha256-9RnErXq8KdNdvZ7471e/mnJkwhHwFvR7OPJwMdD4E9c=' crossorigin='anonymous'><\/script>"" +
					""<script async src='" + Url.Content(Constants.WwwIncludeInkballJSBabel) + @"'><\/script>"" +
					""<script async src='" + Url.Content(Constants.WwwIncludeSvgVmlJSBabel) + @"'><\/script>"");
				}
				</script>"
            );
        });
    }
}