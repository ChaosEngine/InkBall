@page
@using InkBall.Module.Model
@inject Microsoft.Extensions.Options.IOptions<InkBallOptions> commonUIConfigureOptions
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService authorization
@model GamesModel
@{
    ViewData["Title"] = "Game list";

    if (!string.IsNullOrEmpty(commonUIConfigureOptions.Value.HeadElementsSectionName))
    {
        DefineSection(commonUIConfigureOptions.Value.HeadElementsSectionName, async () =>
        {
            WriteLiteral($"<link rel='stylesheet' href='{Url.Content(Constants.WwwIncludeCSS)}' />");
        });
    }

    var sExternalUserID = Model.GameUser.sExternalId;
    var bIsCurrentGameOk = Model.Game != null;
    var bCanViewOtherPlayerGames = (await authorization.AuthorizeAsync(User, null, Constants.InkBallViewOtherGamesPolicyName)).Succeeded;
}

<div class="alert alert-dismissible fade show inkgames" role="alert">
	<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
</div>

<div class='container inkgames'>
	<div class="table-responsive">
		<table class='table game_tab'>
			<thead class="thead-light">
				<tr>
					<th scope='row'>#</th>
					<th scope='col'>Player 1</th>
					<th scope='col'>Player 2</th>
					<th scope='col'>Game state</th>
					<th scope='col'>Action</th>
					<th scope='col'>Game type</th>
				</tr>
			</thead>
			<tbody>
			@if(Model.GamesList != null)
			{
				foreach (var game in Model.GamesList)
				{
					<tr>
						<th scope='row'>@game.iId</th>
						<td class='gtd'>@game.Player1.User.UserName</td>
						<td class='gtd'>@game?.Player2?.User?.UserName</td>
						@{
							bool bIsMyOwnGame;
							if (bIsCurrentGameOk &&
								(game.Player1.User.sExternalId == sExternalUserID ||
								(game?.Player2?.User != null && game.Player2.User.sExternalId == sExternalUserID)))
							{
								bIsMyOwnGame = true;
							}
							else
							{
								bIsMyOwnGame = false;
							}

							switch (game.GameState)
							{
								case InkBallGame.GameStateEnum.AWAITING:
									<td class='font-italic gtd'>waiting for another player</td>
									<td class='gtd'>
										@if (bIsMyOwnGame)
										{
											<a href='Index' class='btn btn-outline-primary'>Continue</a>
										}
										else
										{
											if (!bIsCurrentGameOk)
											{
												<form method='post'>
													<input type='hidden' name='GameID' value='@game.iId' />
													<input type='submit' name='action' value='Join' class='btn btn-outline-primary' />
												</form>
											}
										}
									</td>
									break;

								case InkBallGame.GameStateEnum.ACTIVE:
									<td class='font-italic gtd'>game in progress</td>
									<td class='gtd'>
										@if (bIsMyOwnGame)
										{
											<a href='Index' class="btn btn-outline-primary">Continue</a>
										}
										else
										{
											if (!bIsCurrentGameOk && bCanViewOtherPlayerGames)
											{
												<a href='Index?handler=View&GameID=@game.iId'>View only</a>
											}
										}
									</td>
									break;

								case InkBallGame.GameStateEnum.INACTIVE:
									<td class='font-italic gtd' colspan="2">game inactive</td>
									break;
								case InkBallGame.GameStateEnum.FINISHED:
									<td class='font-italic gtd' colspan="2">game finished</td>
									break;
								default:
									throw new ArgumentNullException(nameof(game.GameState), "bad game state");
							}

							switch (game.GameType)
							{
								case InkBallGame.GameTypeEnum.FIRST_5_ADVANTAGE_PATHS:
									<td class='font-italic gtd'>FIRST 5 ADVANTAGE PATHS</td>
									break;
								case InkBallGame.GameTypeEnum.FIRST_5_CAPTURES:
									<td class='font-italic gtd'>FIRST 5 CAPTURES</td>
									break;
								case InkBallGame.GameTypeEnum.FIRST_5_PATHS:
									<td class='font-italic gtd'>FIRST 5 PATHS</td>
									break;
								case InkBallGame.GameTypeEnum.FIRST_CAPTURE:
									<td class='font-italic gtd'>FIRST CAPTURE</td>
									break;
								default:
									throw new ArgumentNullException(nameof(game.GameType), "bad game type");
							}
						}
					</tr>
				}
			}
			</tbody>
		</table>
	</div>
	<form method='post' class="was-validated">
		@if (!bIsCurrentGameOk)
		{
			<fieldset class="form-group bg-light">
				<div class="form-row" role="group" aria-label="New game options">
					<legend class="col-form-label col-sm-2 pt-0">New game creation</legend>
					<div class="col-auto">
						<select name='GameType' id='GameType' class="custom-select" required>
							<option value='' selected='selected'>Choose game type</option>
							<optgroup label='Game types'>
								<option value='0'>First capture wins</option>
								<option value='1'>First 5 captures wins</option>
								<option value='2'>First 5 paths wins</option>
								<option value='3'>Advantage of 5 paths wins</option>
							</optgroup>
						</select>
						<div class="invalid-feedback">Invalid game type</div>
					</div>
					<div class="col-auto">
						<select name='BoardSize' id='BoardSize' class="custom-select" required>
							<option value='' selected='selected'>Choose board size</option>
							<optgroup label='Board sizes'>
								<option value='20'>20 x 26</option>
								<option value='40'>40 x 52</option>
								<option value='64'>64 x 64</option>
							</optgroup>
						</select>
						<div class="invalid-feedback">Invalid bard size</div>
					</div>
					<div class="form-group custom-control custom-switch m-2">
						<input type="checkbox" class="custom-control-input" name="CpuOponent" id="CpuOponent" />
						<label class="custom-control-label" for="CpuOponent">Play against CPU</label>
					</div>
					<input type='submit' name='action' value='New game' class='col-auto mx-1 btn btn-primary' />
				</div>
			</fieldset>
			<div class="form-row">
				<a href='Home' class='col-auto mx-1 btn btn-outline-primary'>Home</a>
			</div>
		}
		else
		{
			<a href='Home' class='btn btn-outline-primary'>Home</a>
		}
	</form>
</div>

<script type='text/javascript'>
"use strict";
	const alert = document.querySelector("div.alert.alert-dismissible.inkgames");
	const msg = "@Model.Message";
	if (msg !== "") {
		let addendum;
		//debugger;
		if (msg.toLowerCase().indexOf('exception') !== -1)
			addendum = 'danger';
		else if (msg.toLowerCase().indexOf('error') !== -1)
			addendum = 'danger';
		else if (msg.toLowerCase().indexOf('warning') !== -1)
			addendum = 'warning';
		else
			addendum = 'success';

		const statusMessageClass = 'alert-' + addendum;
		alert.classList.add(statusMessageClass);
		alert.innerHTML += "\r\n" + msg;
	}
	else
		alert.parentNode.removeChild(alert);
</script>