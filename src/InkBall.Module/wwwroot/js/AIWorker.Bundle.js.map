{"version":3,"file":"AIWorker.Bundle.js","mappings":";;;;;;;AAAa;;AAEb,YAAY,mBAAO,CAAC,GAAO;AAC3B,YAAY,mBAAO,CAAC,GAAW;AAC/B,qBAAqB,mBAAO,CAAC,GAAkB;AAC/C,aAAa,mCAAyD;;AAEtE;AACA;AACA;AACA;;AAEA;AACA,yBAAsB;;AAEtB;AACA,wCAAwC;AACxC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,yCAAyC;;AAEzC;;AAEA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,kBAAkB;;AAElC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;;AAEA;AACA,0CAA0C;;AAE1C;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,+CAA+C;AAC/E,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC9XA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA,yBAAyB,mBAAO,CAAC,GAAW;AAC5C,2BAA2B,mBAAO,CAAC,GAAa;;AAEhD;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,qBAAqB;AACrB,mBAAmB;;;;;;;;ACXnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,oBAAoB;AAChC;AACA;AACA;AACA,mBAAmB;AACnB,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,SAAS;AACrB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB,OAAO;AACjD,wDAAwD;AACxD;AACA;AACA,mLAAmL;AACnL;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY;AACZ;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,SAAS;AACrB,YAAY,wBAAwB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,MAAM;AAC3B;AACA;;AAEA,MAAM;;AAEN;AACA,qBAAqB,MAAM;AAC3B;AACA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA,oBAAoB,oBAAoB;AACxC;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;;AAEA,iCAAiC,eAAe;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,mBAAmB;AACxC;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD;AACjD,sDAAsD;AACtD,oDAAoD;AACpD,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,oBAAoB;AACxC;AACA;AACA;;;AAGA,4BAA4B,oBAAoB;AAChD,+KAA+K;AAC/K,sIAAsI;AACtI,kFAAkF;AAClF;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA,gCAAgC,MAAM;AACtC;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB,YAAY;AACZ;AACA;AACA;AACA;;;;;;;;AChpBA,eAAe,KAAoD,oBAAoB,CAAqE,CAAC,iBAAiB,aAAa,sBAAsB,uBAAuB,KAAK,IAAI,EAAE,YAAY,8KAA8K,aAAa,mBAAmB,mCAAmC,IAAI,EAAE,qBAAqB,YAAY,KAAK,KAAK,YAAY,KAAK,+DAA+D,8BAA8B,kBAAkB,WAAW,iBAAiB,gBAAgB,sBAAsB,kBAAkB,2HAA2H,kBAAkB,0BAA0B,YAAY,WAAW,0BAA0B,SAAS,gBAAgB,6BAA6B,sBAAsB,6DAA6D,YAAY,IAAI,KAAK,oBAAoB,mBAAmB,SAAS,gBAAgB,qIAAqI,gBAAgB,qBAAqB,gBAAgB,qBAAqB,cAAc,sCAAsC,cAAc,qCAAqC,gBAAgB,sEAAsE,gBAAgB,sEAAsE,cAAc,OAAO,mEAAmE,sBAAsB,gBAAgB,SAAS,mCAAmC,+BAA+B,8BAA8B,kCAAkC,+BAA+B,gCAAgC,qBAAqB,oBAAoB,2BAA2B,EAAE,EAAE,YAAY,oBAAoB,KAAK,oCAAoC,2DAA2D,UAAU,SAAS,kCAAkC,gBAAgB,oBAAoB,aAAa,EAAE,EAAE,YAAY,oBAAoB,KAAK,8CAA8C,WAAW,2BAA2B,WAAW,UAAU,SAAS,8BAA8B,6BAA6B,8BAA8B,YAAY,WAAW,sBAAsB,YAAY,4CAA4C,yFAAyF,KAAK,8BAA8B,gBAAgB,gBAAgB,+CAA+C,iBAAiB,YAAY,gCAAgC,kDAAkD,8BAA8B,4BAA4B,kCAAkC,kBAAkB,qDAAqD,YAAY,EAAE,yDAAyD,wBAAwB,yEAAyE,qGAAqG,YAAY,gCAAgC,SAAS,uCAAuC,qBAAqB,uCAAuC,qBAAqB,+BAA+B,iBAAiB,kCAAkC,wBAAwB,gCAAgC,aAAa,EAAE,wEAAwE,SAAS,sCAAsC,iCAAiC,oDAAoD,sGAAsG,iDAAiD,4BAA4B,YAAY,KAAK,MAAM,wBAAwB,4BAA4B,YAAY,KAAK,MAAM,wBAAwB,yCAAyC,0BAA0B,8CAA8C,KAAK,kCAAkC,EAAE,iCAAiC,oBAAoB,KAAK,6IAA6I,8CAA8C,mBAAmB,QAAQ,SAAS,qCAAqC,qEAAqE,8BAA8B,4CAA4C,sBAAsB,gCAAgC,kCAAkC,kDAAkD,6BAA6B,kFAAkF,iHAAiH,sCAAsC,0FAA0F,+CAA+C,sCAAsC,OAAO,KAAK,sPAAsP,8CAA8C,cAAc,8CAA8C,4DAA4D,8EAA8E,8CAA8C,mBAAmB,kEAAkE,MAAM,KAAK,oBAAoB,2BAA2B,gBAAgB,KAAK,KAAK,oBAAoB,2BAA2B,SAAS,iDAAiD,YAAY,KAAK,cAAc,mCAAmC,8BAA8B,KAAK,gHAAgH,GAAG;;;;;;;;ACA7zM,eAAe,KAAoD,YAAY,CAAwF,CAAC,kBAAkB,aAAa,0CAA0C,sBAAsB,kCAAkC,wCAAwC,QAAQ,sGAAsG,SAAS,+GAA+G,KAAK,IAAI,4DAA4D,KAAK,IAAI,4DAA4D,kCAAkC,cAAc,2BAA2B,mHAAmH,iCAAiC,wCAAwC,mCAAmC,sBAAsB,mDAAmD,wCAAwC,8BAA8B,gRAAgR,oBAAoB,WAAW,YAAY,IAAI,YAAY,SAAS,YAAY,wBAAwB,+HAA+H,iEAAiE,gRAAgR,qBAAqB,gRAAgR,qBAAqB,gRAAgR,qBAAqB,cAAc,gBAAgB,sCAAsC,8BAA8B,uCAAuC,SAAS,EAAE;;;;;;;;;;;;;;ACCtqF;AACf;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,QAAQ;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,eAAe;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,eAAe;AAC9B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;UC9EA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,eAAe,4BAA4B;WAC3C,eAAe;WACf,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA,qCAAqC,0BAA0B;AAClD;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA,SAAS,eAAQ;AACjB;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,UAAU;AACrC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA,EAAE,IAAI,YAAY;AAClB;AACA;;AAEA;AACA,8BAA8B,MAAM;AACpC,WAAW;AACX,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D,+DAA+D;AAC/D;AACA,YAAY;AACZ;AACA,0DAA0D;AAC1D,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,0DAA0D;AAC1D,kDAAkD;AAClD,kDAAkD;AAClD,4DAA4D;AAC5D;AACA,WAAW,OAAO;AAClB;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc,GAAG,cAAc,GAAG,cAAc;AACtF;AACA,yDAAyD;AACzD,yDAAyD;;AAEzD;AACA;AACA;;AAEA;AACA;;AAEA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6CAA6C,EAAE,GAAG,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE,GAAG,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,wDAAwD;AACxD,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA,mEAAmE,yBAAyB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,YAAY,EAAE,YAAY;;AAExE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,QAAQ,sBAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,6BAA6B;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,cAAc,QAAQ,YAAY,KAAK;AACvC;AACA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChgBAAgB,EAAE,GAAG,EAAE;AACvB,MAAM;AACN;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE,eAAQ;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,eAAQ;AACZ;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI,eAAQ,oCAAoC,gBAAgB;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,0CAA0C;AACtE,oDAAoD,eAAe;AACnE,kDAAkD,eAAe;;;AAGjE;AACA,2BAA2B,0CAA0C;AACrE,iDAAiD,eAAe;;AAEhE;AACA,4BAA4B,6CAA6C;AACzE,IAAI;AACJ,GAAG;AACH;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,+EAA+E;AAC/E;;AAEA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAOE;;;AChrCkC;AACH;AAC2D;;;AAG5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD,uBAAuB,wBAAwB;AAC/C;;AAEA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA,GAAG,IAAI;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,EAAE,GAAG,EAAE,GAAG,KAAK,GAAG,KAAK,mCAAmC,KAAK,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE;;AAE7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,GAAG,EAAE,GAAG,KAAK,GAAG,KAAK;;;AAGhD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,OAAO;AACzB,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iEAAiE,yBAAyB;AAC1F,aAAa,OAAO;AACpB;AACA;;AAEA;AACA,8DAA8D,EAAE,SAAS,EAAE;AAC3E;AACA,qCAAqC,MAAM;AAC3C;AACA;;;AAGA;AACA;AACA,mBAAmB,kBAAkB;AACrC,2BAA2B;AAC3B,mCAAmC;AACnC;AACA,kCAAkC,EAAE;AACpC;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,6BAA6B,mBAAmB;AAChD,mBAAmB;AACnB;AACA;AACA,gBAAgB,OAAO;AACvB,8DAA8D,EAAE,SAAS,EAAE;AAC3E,iBAAiB;AACjB,qBAAqB,EAAE,GAAG,EAAE;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,GAAG,qBAAqB,GAAG,qBAAqB;;AAEzE,gEAAgE,qBAAqB,SAAS,qBAAqB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,IAAI;AACjE;AACA,oFAAoF,WAAW;AAC/F;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,gBAAgB,WAAW;AAC3B,GAAG;;AAEH;AACA;;AAEA;AACA,qBAAqB,UAAU;AAC/B,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,oDAAoD,iCAAiC;AACrF;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;;AAE+B;;;AC7T/B,CAAqD;AACuC;;;AAG5F;AACA;AACA;;AAEA,oBAAoB,MAAM;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,IAAI,eAAQ,kBAAkB,mBAAmB,mBAAmB,kBAAkB;;AAEtF,mBAAmB,OAAO;AAC1B,wCAAwC,iBAAiB,0BAA0B,sCAAsC;AACzH;;AAEA,kBAAkB,4CAA4C;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mBAAmB,OAAO;AAC1B,wCAAwC,iBAAiB,0BAA0B,sCAAsC;;;AAGzH;AACA,aAAa,OAAO;AACpB;AACA,KAAK;AACL,wBAAwB,oBAAU;;AAElC,wDAAwD,MAAM;AAC9D,4BAA4B,mBAAmB;;AAE/C,kBAAkB,yFAAyF;AAC3G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mBAAmB,OAAO;AAC1B,wCAAwC,iBAAiB,0BAA0B,gDAAgD;AACnI;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG,UAAU,+BAA+B,iBAAiB;AAC7D;AACA;AACA,CAAC;;AAED,eAAQ","sources":["webpack:///./node_modules/concaveman/index.js","webpack:///./node_modules/point-in-polygon/flat.js","webpack:///./node_modules/point-in-polygon/index.js","webpack:///./node_modules/point-in-polygon/nested.js","webpack:///./node_modules/poly-decomp/src/index.js","webpack:///./node_modules/rbush/rbush.min.js","webpack:///./node_modules/robust-predicates/umd/orient2d.min.js","webpack:///./node_modules/tinyqueue/index.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///../InkBall/src/InkBall.Module/wwwroot/js/shared.js","webpack:///../InkBall/src/InkBall.Module/wwwroot/js/AISource.js","webpack:///../InkBall/src/InkBall.Module/wwwroot/js/AIWorker.js"],"sourcesContent":["'use strict';\n\nvar RBush = require('rbush');\nvar Queue = require('tinyqueue');\nvar pointInPolygon = require('point-in-polygon');\nvar orient = require('robust-predicates/umd/orient2d.min.js').orient2d;\n\n// Fix for require issue in webpack https://github.com/mapbox/concaveman/issues/18\nif (Queue.default) {\n    Queue = Queue.default;\n}\n\nmodule.exports = concaveman;\nmodule.exports.default = concaveman;\n\nfunction concaveman(points, concavity, lengthThreshold) {\n    // a relative measure of concavity; higher value means simpler hull\n    concavity = Math.max(0, concavity === undefined ? 2 : concavity);\n\n    // when a segment goes below this length threshold, it won't be drilled down further\n    lengthThreshold = lengthThreshold || 0;\n\n    // start with a convex hull of the points\n    var hull = fastConvexHull(points);\n\n    // index the points with an R-tree\n    var tree = new RBush(16);\n    tree.toBBox = function (a) {\n        return {\n            minX: a[0],\n            minY: a[1],\n            maxX: a[0],\n            maxY: a[1]\n        };\n    };\n    tree.compareMinX = function (a, b) { return a[0] - b[0]; };\n    tree.compareMinY = function (a, b) { return a[1] - b[1]; };\n\n    tree.load(points);\n\n    // turn the convex hull into a linked list and populate the initial edge queue with the nodes\n    var queue = [];\n    for (var i = 0, last; i < hull.length; i++) {\n        var p = hull[i];\n        tree.remove(p);\n        last = insertNode(p, last);\n        queue.push(last);\n    }\n\n    // index the segments with an R-tree (for intersection checks)\n    var segTree = new RBush(16);\n    for (i = 0; i < queue.length; i++) segTree.insert(updateBBox(queue[i]));\n\n    var sqConcavity = concavity * concavity;\n    var sqLenThreshold = lengthThreshold * lengthThreshold;\n\n    // process edges one by one\n    while (queue.length) {\n        var node = queue.shift();\n        var a = node.p;\n        var b = node.next.p;\n\n        // skip the edge if it's already short enough\n        var sqLen = getSqDist(a, b);\n        if (sqLen < sqLenThreshold) continue;\n\n        var maxSqLen = sqLen / sqConcavity;\n\n        // find the best connection point for the current edge to flex inward to\n        p = findCandidate(tree, node.prev.p, a, b, node.next.next.p, maxSqLen, segTree);\n\n        // if we found a connection and it satisfies our concavity measure\n        if (p && Math.min(getSqDist(p, a), getSqDist(p, b)) <= maxSqLen) {\n            // connect the edge endpoints through this point and add 2 new edges to the queue\n            queue.push(node);\n            queue.push(insertNode(p, node));\n\n            // update point and segment indexes\n            tree.remove(p);\n            segTree.remove(node);\n            segTree.insert(updateBBox(node));\n            segTree.insert(updateBBox(node.next));\n        }\n    }\n\n    // convert the resulting hull linked list to an array of points\n    node = last;\n    var concave = [];\n    do {\n        concave.push(node.p);\n        node = node.next;\n    } while (node !== last);\n\n    concave.push(node.p);\n\n    return concave;\n}\n\nfunction findCandidate(tree, a, b, c, d, maxDist, segTree) {\n    var queue = new Queue([], compareDist);\n    var node = tree.data;\n\n    // search through the point R-tree with a depth-first search using a priority queue\n    // in the order of distance to the edge (b, c)\n    while (node) {\n        for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n\n            var dist = node.leaf ? sqSegDist(child, b, c) : sqSegBoxDist(b, c, child);\n            if (dist > maxDist) continue; // skip the node if it's farther than we ever need\n\n            queue.push({\n                node: child,\n                dist: dist\n            });\n        }\n\n        while (queue.length && !queue.peek().node.children) {\n            var item = queue.pop();\n            var p = item.node;\n\n            // skip all points that are as close to adjacent edges (a,b) and (c,d),\n            // and points that would introduce self-intersections when connected\n            var d0 = sqSegDist(p, a, b);\n            var d1 = sqSegDist(p, c, d);\n            if (item.dist < d0 && item.dist < d1 &&\n                noIntersections(b, p, segTree) &&\n                noIntersections(c, p, segTree)) return p;\n        }\n\n        node = queue.pop();\n        if (node) node = node.node;\n    }\n\n    return null;\n}\n\nfunction compareDist(a, b) {\n    return a.dist - b.dist;\n}\n\n// square distance from a segment bounding box to the given one\nfunction sqSegBoxDist(a, b, bbox) {\n    if (inside(a, bbox) || inside(b, bbox)) return 0;\n    var d1 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);\n    if (d1 === 0) return 0;\n    var d2 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);\n    if (d2 === 0) return 0;\n    var d3 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);\n    if (d3 === 0) return 0;\n    var d4 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);\n    if (d4 === 0) return 0;\n    return Math.min(d1, d2, d3, d4);\n}\n\nfunction inside(a, bbox) {\n    return a[0] >= bbox.minX &&\n           a[0] <= bbox.maxX &&\n           a[1] >= bbox.minY &&\n           a[1] <= bbox.maxY;\n}\n\n// check if the edge (a,b) doesn't intersect any other edges\nfunction noIntersections(a, b, segTree) {\n    var minX = Math.min(a[0], b[0]);\n    var minY = Math.min(a[1], b[1]);\n    var maxX = Math.max(a[0], b[0]);\n    var maxY = Math.max(a[1], b[1]);\n\n    var edges = segTree.search({minX: minX, minY: minY, maxX: maxX, maxY: maxY});\n    for (var i = 0; i < edges.length; i++) {\n        if (intersects(edges[i].p, edges[i].next.p, a, b)) return false;\n    }\n    return true;\n}\n\nfunction cross(p1, p2, p3) {\n    return orient(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n}\n\n// check if the edges (p1,q1) and (p2,q2) intersect\nfunction intersects(p1, q1, p2, q2) {\n    return p1 !== q2 && q1 !== p2 &&\n        cross(p1, q1, p2) > 0 !== cross(p1, q1, q2) > 0 &&\n        cross(p2, q2, p1) > 0 !== cross(p2, q2, q1) > 0;\n}\n\n// update the bounding box of a node's edge\nfunction updateBBox(node) {\n    var p1 = node.p;\n    var p2 = node.next.p;\n    node.minX = Math.min(p1[0], p2[0]);\n    node.minY = Math.min(p1[1], p2[1]);\n    node.maxX = Math.max(p1[0], p2[0]);\n    node.maxY = Math.max(p1[1], p2[1]);\n    return node;\n}\n\n// speed up convex hull by filtering out points inside quadrilateral formed by 4 extreme points\nfunction fastConvexHull(points) {\n    var left = points[0];\n    var top = points[0];\n    var right = points[0];\n    var bottom = points[0];\n\n    // find the leftmost, rightmost, topmost and bottommost points\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        if (p[0] < left[0]) left = p;\n        if (p[0] > right[0]) right = p;\n        if (p[1] < top[1]) top = p;\n        if (p[1] > bottom[1]) bottom = p;\n    }\n\n    // filter out points that are inside the resulting quadrilateral\n    var cull = [left, top, right, bottom];\n    var filtered = cull.slice();\n    for (i = 0; i < points.length; i++) {\n        if (!pointInPolygon(points[i], cull)) filtered.push(points[i]);\n    }\n\n    // get convex hull around the filtered points\n    return convexHull(filtered);\n}\n\n// create a new node in a doubly linked list\nfunction insertNode(p, prev) {\n    var node = {\n        p: p,\n        prev: null,\n        next: null,\n        minX: 0,\n        minY: 0,\n        maxX: 0,\n        maxY: 0\n    };\n\n    if (!prev) {\n        node.prev = node;\n        node.next = node;\n\n    } else {\n        node.next = prev.next;\n        node.prev = prev;\n        prev.next.prev = node;\n        prev.next = node;\n    }\n    return node;\n}\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1[0] - p2[0],\n        dy = p1[1] - p2[1];\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction sqSegDist(p, p1, p2) {\n\n    var x = p1[0],\n        y = p1[1],\n        dx = p2[0] - x,\n        dy = p2[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2[0];\n            y = p2[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p[0] - x;\n    dy = p[1] - y;\n\n    return dx * dx + dy * dy;\n}\n\n// segment to segment distance, ported from http://geomalgorithms.com/a07-_distance.html by Dan Sunday\nfunction sqSegSegDist(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var ux = x1 - x0;\n    var uy = y1 - y0;\n    var vx = x3 - x2;\n    var vy = y3 - y2;\n    var wx = x0 - x2;\n    var wy = y0 - y2;\n    var a = ux * ux + uy * uy;\n    var b = ux * vx + uy * vy;\n    var c = vx * vx + vy * vy;\n    var d = ux * wx + uy * wy;\n    var e = vx * wx + vy * wy;\n    var D = a * c - b * b;\n\n    var sc, sN, tc, tN;\n    var sD = D;\n    var tD = D;\n\n    if (D === 0) {\n        sN = 0;\n        sD = 1;\n        tN = e;\n        tD = c;\n    } else {\n        sN = b * e - c * d;\n        tN = a * e - b * d;\n        if (sN < 0) {\n            sN = 0;\n            tN = e;\n            tD = c;\n        } else if (sN > sD) {\n            sN = sD;\n            tN = e + b;\n            tD = c;\n        }\n    }\n\n    if (tN < 0.0) {\n        tN = 0.0;\n        if (-d < 0.0) sN = 0.0;\n        else if (-d > a) sN = sD;\n        else {\n            sN = -d;\n            sD = a;\n        }\n    } else if (tN > tD) {\n        tN = tD;\n        if ((-d + b) < 0.0) sN = 0;\n        else if (-d + b > a) sN = sD;\n        else {\n            sN = -d + b;\n            sD = a;\n        }\n    }\n\n    sc = sN === 0 ? 0 : sN / sD;\n    tc = tN === 0 ? 0 : tN / tD;\n\n    var cx = (1 - sc) * x0 + sc * x1;\n    var cy = (1 - sc) * y0 + sc * y1;\n    var cx2 = (1 - tc) * x2 + tc * x3;\n    var cy2 = (1 - tc) * y2 + tc * y3;\n    var dx = cx2 - cx;\n    var dy = cy2 - cy;\n\n    return dx * dx + dy * dy;\n}\n\nfunction compareByX(a, b) {\n    return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];\n}\n\nfunction convexHull(points) {\n    points.sort(compareByX);\n\n    var lower = [];\n    for (var i = 0; i < points.length; i++) {\n        while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0) {\n            lower.pop();\n        }\n        lower.push(points[i]);\n    }\n\n    var upper = [];\n    for (var ii = points.length - 1; ii >= 0; ii--) {\n        while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[ii]) <= 0) {\n            upper.pop();\n        }\n        upper.push(points[ii]);\n    }\n\n    upper.pop();\n    lower.pop();\n    return lower.concat(upper);\n}\n","module.exports = function pointInPolygonFlat (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = (end-start)/2;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[start+i*2+0], yi = vs[start+i*2+1];\n        var xj = vs[start+j*2+0], yj = vs[start+j*2+1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n","var pointInPolygonFlat = require('./flat.js')\nvar pointInPolygonNested = require('./nested.js')\n\nmodule.exports = function pointInPolygon (point, vs, start, end) {\n    if (vs.length > 0 && Array.isArray(vs[0])) {\n        return pointInPolygonNested(point, vs, start, end);\n    } else {\n        return pointInPolygonFlat(point, vs, start, end);\n    }\n}\nmodule.exports.nested = pointInPolygonNested\nmodule.exports.flat = pointInPolygonFlat\n","// ray-casting algorithm based on\n// https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n\nmodule.exports = function pointInPolygonNested (point, vs, start, end) {\n    var x = point[0], y = point[1];\n    var inside = false;\n    if (start === undefined) start = 0;\n    if (end === undefined) end = vs.length;\n    var len = end - start;\n    for (var i = 0, j = len - 1; i < len; j = i++) {\n        var xi = vs[i+start][0], yi = vs[i+start][1];\n        var xj = vs[j+start][0], yj = vs[j+start][1];\n        var intersect = ((yi > y) !== (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n    return inside;\n};\n","module.exports = {\n    decomp: polygonDecomp,\n    quickDecomp: polygonQuickDecomp,\n    isSimple: polygonIsSimple,\n    removeCollinearPoints: polygonRemoveCollinearPoints,\n    removeDuplicatePoints: polygonRemoveDuplicatePoints,\n    makeCCW: polygonMakeCCW\n};\n\n/**\n * Compute the intersection between two lines.\n * @static\n * @method lineInt\n * @param  {Array}  l1          Line vector 1\n * @param  {Array}  l2          Line vector 2\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\n * @return {Array}              The intersection point.\n */\nfunction lineInt(l1,l2,precision){\n    precision = precision || 0;\n    var i = [0,0]; // point\n    var a1, b1, c1, a2, b2, c2, det; // scalars\n    a1 = l1[1][1] - l1[0][1];\n    b1 = l1[0][0] - l1[1][0];\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\n    a2 = l2[1][1] - l2[0][1];\n    b2 = l2[0][0] - l2[1][0];\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\n    det = a1 * b2 - a2*b1;\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\n        i[0] = (b2 * c1 - b1 * c2) / det;\n        i[1] = (a1 * c2 - a2 * c1) / det;\n    }\n    return i;\n}\n\n/**\n * Checks if two line segments intersects.\n * @method segmentsIntersect\n * @param {Array} p1 The start vertex of the first line segment.\n * @param {Array} p2 The end vertex of the first line segment.\n * @param {Array} q1 The start vertex of the second line segment.\n * @param {Array} q2 The end vertex of the second line segment.\n * @return {Boolean} True if the two line segments intersect\n */\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\n\tvar dx = p2[0] - p1[0];\n\tvar dy = p2[1] - p1[1];\n\tvar da = q2[0] - q1[0];\n\tvar db = q2[1] - q1[1];\n\n\t// segments are parallel\n\tif((da*dy - db*dx) === 0){\n\t\treturn false;\n\t}\n\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\n\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\n}\n\n/**\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\n * @static\n * @method area\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @return {Number}\n */\nfunction triangleArea(a,b,c){\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\n}\n\nfunction isLeft(a,b,c){\n    return triangleArea(a,b,c) > 0;\n}\n\nfunction isLeftOn(a,b,c) {\n    return triangleArea(a, b, c) >= 0;\n}\n\nfunction isRight(a,b,c) {\n    return triangleArea(a, b, c) < 0;\n}\n\nfunction isRightOn(a,b,c) {\n    return triangleArea(a, b, c) <= 0;\n}\n\nvar tmpPoint1 = [],\n    tmpPoint2 = [];\n\n/**\n * Check if three points are collinear\n * @method collinear\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\n * @return {Boolean}\n */\nfunction collinear(a,b,c,thresholdAngle) {\n    if(!thresholdAngle){\n        return triangleArea(a, b, c) === 0;\n    } else {\n        var ab = tmpPoint1,\n            bc = tmpPoint2;\n\n        ab[0] = b[0]-a[0];\n        ab[1] = b[1]-a[1];\n        bc[0] = c[0]-b[0];\n        bc[1] = c[1]-b[1];\n\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\n            angle = Math.acos(dot/(magA*magB));\n        return angle < thresholdAngle;\n    }\n}\n\nfunction sqdist(a,b){\n    var dx = b[0] - a[0];\n    var dy = b[1] - a[1];\n    return dx * dx + dy * dy;\n}\n\n/**\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\n * @method at\n * @param  {Number} i\n * @return {Array}\n */\nfunction polygonAt(polygon, i){\n    var s = polygon.length;\n    return polygon[i < 0 ? i % s + s : i % s];\n}\n\n/**\n * Clear the polygon data\n * @method clear\n * @return {Array}\n */\nfunction polygonClear(polygon){\n    polygon.length = 0;\n}\n\n/**\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\n * @method append\n * @param {Polygon} poly The polygon to get points from.\n * @param {Number}  from The vertex index in \"poly\".\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\n * @return {Array}\n */\nfunction polygonAppend(polygon, poly, from, to){\n    for(var i=from; i<to; i++){\n        polygon.push(poly[i]);\n    }\n}\n\n/**\n * Make sure that the polygon vertices are ordered counter-clockwise.\n * @method makeCCW\n */\nfunction polygonMakeCCW(polygon){\n    var br = 0,\n        v = polygon;\n\n    // find bottom right point\n    for (var i = 1; i < polygon.length; ++i) {\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\n            br = i;\n        }\n    }\n\n    // reverse poly if clockwise\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\n        polygonReverse(polygon);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Reverse the vertices in the polygon\n * @method reverse\n */\nfunction polygonReverse(polygon){\n    var tmp = [];\n    var N = polygon.length;\n    for(var i=0; i!==N; i++){\n        tmp.push(polygon.pop());\n    }\n    for(var i=0; i!==N; i++){\n\t\tpolygon[i] = tmp[i];\n    }\n}\n\n/**\n * Check if a point in the polygon is a reflex point\n * @method isReflex\n * @param  {Number}  i\n * @return {Boolean}\n */\nfunction polygonIsReflex(polygon, i){\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\n}\n\nvar tmpLine1=[],\n    tmpLine2=[];\n\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\nfunction polygonCanSee(polygon, a,b) {\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\n\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\n        return false;\n    }\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\n            continue;\n        }\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\n            l1[0] = polygonAt(polygon, a);\n            l1[1] = polygonAt(polygon, b);\n            l2[0] = polygonAt(polygon, i);\n            l2[1] = polygonAt(polygon, i + 1);\n            p = lineInt(l1,l2);\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee2\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\nfunction polygonCanSee2(polygon, a,b) {\n    // for each edge\n    for (var i = 0; i !== polygon.length; ++i) {\n        // ignore incident edges\n        if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b){\n            continue;\n        }\n        if( lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i+1)) ){\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Copy the polygon from vertex i to vertex j.\n * @method copy\n * @param  {Number} i\n * @param  {Number} j\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\n * @return {Polygon}                The resulting copy.\n */\nfunction polygonCopy(polygon, i,j,targetPoly){\n    var p = targetPoly || [];\n    polygonClear(p);\n    if (i < j) {\n        // Insert all vertices from i to j\n        for(var k=i; k<=j; k++){\n            p.push(polygon[k]);\n        }\n\n    } else {\n\n        // Insert vertices 0 to j\n        for(var k=0; k<=j; k++){\n            p.push(polygon[k]);\n        }\n\n        // Insert vertices i to end\n        for(var k=i; k<polygon.length; k++){\n            p.push(polygon[k]);\n        }\n    }\n\n    return p;\n}\n\n/**\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\n * @method getCutEdges\n * @return {Array}\n */\nfunction polygonGetCutEdges(polygon) {\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\n    var nDiags = Number.MAX_VALUE;\n\n    for (var i = 0; i < polygon.length; ++i) {\n        if (polygonIsReflex(polygon, i)) {\n            for (var j = 0; j < polygon.length; ++j) {\n                if (polygonCanSee(polygon, i, j)) {\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\n\n                    for(var k=0; k<tmp2.length; k++){\n                        tmp1.push(tmp2[k]);\n                    }\n\n                    if (tmp1.length < nDiags) {\n                        min = tmp1;\n                        nDiags = tmp1.length;\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\n                    }\n                }\n            }\n        }\n    }\n\n    return min;\n}\n\n/**\n * Decomposes the polygon into one or more convex sub-Polygons.\n * @method decomp\n * @return {Array} An array or Polygon objects.\n */\nfunction polygonDecomp(polygon){\n    var edges = polygonGetCutEdges(polygon);\n    if(edges.length > 0){\n        return polygonSlice(polygon, edges);\n    } else {\n        return [polygon];\n    }\n}\n\n/**\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\n * @method slice\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\n * @return {Array}\n */\nfunction polygonSlice(polygon, cutEdges){\n    if(cutEdges.length === 0){\n\t\treturn [polygon];\n    }\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\n\n        var polys = [polygon];\n\n        for(var i=0; i<cutEdges.length; i++){\n            var cutEdge = cutEdges[i];\n            // Cut all polys\n            for(var j=0; j<polys.length; j++){\n                var poly = polys[j];\n                var result = polygonSlice(poly, cutEdge);\n                if(result){\n                    // Found poly! Cut and quit\n                    polys.splice(j,1);\n                    polys.push(result[0],result[1]);\n                    break;\n                }\n            }\n        }\n\n        return polys;\n    } else {\n\n        // Was given one edge\n        var cutEdge = cutEdges;\n        var i = polygon.indexOf(cutEdge[0]);\n        var j = polygon.indexOf(cutEdge[1]);\n\n        if(i !== -1 && j !== -1){\n            return [polygonCopy(polygon, i,j),\n                    polygonCopy(polygon, j,i)];\n        } else {\n            return false;\n        }\n    }\n}\n\n/**\n * Checks that the line segments of this polygon do not intersect each other.\n * @method isSimple\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\n * @return {Boolean}\n * @todo Should it check all segments with all others?\n */\nfunction polygonIsSimple(polygon){\n    var path = polygon, i;\n    // Check\n    for(i=0; i<path.length-1; i++){\n        for(var j=0; j<i-1; j++){\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\n                return false;\n            }\n        }\n    }\n\n    // Check the segment between the last and the first point to all others\n    for(i=1; i<path.length-2; i++){\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\n\tdelta = delta || 0;\n\tvar a1 = p2[1] - p1[1];\n\tvar b1 = p1[0] - p2[0];\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\n\tvar a2 = q2[1] - q1[1];\n\tvar b2 = q1[0] - q2[0];\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\n\tvar det = (a1 * b2) - (a2 * b1);\n\n\tif(!scalar_eq(det,0,delta)){\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\n\t} else {\n\t\treturn [0,0];\n    }\n}\n\n/**\n * Quickly decompose the Polygon into convex sub-polygons.\n * @method quickDecomp\n * @param  {Array} result\n * @param  {Array} [reflexVertices]\n * @param  {Array} [steinerPoints]\n * @param  {Number} [delta]\n * @param  {Number} [maxlevel]\n * @param  {Number} [level]\n * @return {Array}\n */\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\n    maxlevel = maxlevel || 100;\n    level = level || 0;\n    delta = delta || 25;\n    result = typeof(result)!==\"undefined\" ? result : [];\n    reflexVertices = reflexVertices || [];\n    steinerPoints = steinerPoints || [];\n\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\n    var lowerPoly=[], upperPoly=[]; // polygons\n    var poly = polygon,\n        v = polygon;\n\n    if(v.length < 3){\n\t\treturn result;\n    }\n\n    level++;\n    if(level > maxlevel){\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\n        return result;\n    }\n\n    for (var i = 0; i < polygon.length; ++i) {\n        if (polygonIsReflex(poly, i)) {\n            reflexVertices.push(poly[i]);\n            upperDist = lowerDist = Number.MAX_VALUE;\n\n\n            for (var j = 0; j < polygon.length; ++j) {\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\n                        d = sqdist(poly[i], p);\n                        if (d < lowerDist) { // keep only the closest intersection\n                            lowerDist = d;\n                            lowerInt = p;\n                            lowerIndex = j;\n                        }\n                    }\n                }\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\n                        d = sqdist(poly[i], p);\n                        if (d < upperDist) {\n                            upperDist = d;\n                            upperInt = p;\n                            upperIndex = j;\n                        }\n                    }\n                }\n            }\n\n            // if there are no vertices to connect to, choose a point in the middle\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\n                steinerPoints.push(p);\n\n                if (i < upperIndex) {\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\n                    lowerPoly.push(p);\n                    upperPoly.push(p);\n                    if (lowerIndex !== 0){\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\n                    }\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\n                    polygonAppend(upperPoly, poly,0,i+1);\n                } else {\n                    if (i !== 0){\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\n                        polygonAppend(lowerPoly, poly,i,poly.length);\n                    }\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\n                    lowerPoly.push(p);\n                    upperPoly.push(p);\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\n                }\n            } else {\n                // connect to the closest point within the triangle\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\n\n                if (lowerIndex > upperIndex) {\n                    upperIndex += polygon.length;\n                }\n                closestDist = Number.MAX_VALUE;\n\n                if(upperIndex < lowerIndex){\n                    return result;\n                }\n\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\n                    if (\n                        isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) &&\n                        isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))\n                    ) {\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\n                        if (d < closestDist && polygonCanSee2(poly, i, j)) {\n                            closestDist = d;\n                            closestIndex = j % polygon.length;\n                        }\n                    }\n                }\n\n                if (i < closestIndex) {\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\n                    if (closestIndex !== 0){\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\n                    }\n                    polygonAppend(upperPoly, poly,0,i+1);\n                } else {\n                    if (i !== 0){\n                        polygonAppend(lowerPoly, poly,i,v.length);\n                    }\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\n                }\n            }\n\n            // solve smallest poly first\n            if (lowerPoly.length < upperPoly.length) {\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n            } else {\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n            }\n\n            return result;\n        }\n    }\n    result.push(polygon);\n\n    return result;\n}\n\n/**\n * Remove collinear points in the polygon.\n * @method removeCollinearPoints\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\n * @return {Number}           The number of points removed\n */\nfunction polygonRemoveCollinearPoints(polygon, precision){\n    var num = 0;\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\n            // Remove the middle point\n            polygon.splice(i%polygon.length,1);\n            num++;\n        }\n    }\n    return num;\n}\n\n/**\n * Remove duplicate points in the polygon.\n * @method removeDuplicatePoints\n * @param  {Number} [precision] The threshold to use when determining whether two points are the same. Use zero for best precision.\n */\nfunction polygonRemoveDuplicatePoints(polygon, precision){\n    for(var i=polygon.length-1; i>=1; --i){\n        var pi = polygon[i];\n        for(var j=i-1; j>=0; --j){\n            if(points_eq(pi, polygon[j], precision)){\n                polygon.splice(i,1);\n                continue;\n            }\n        }\n    }\n}\n\n/**\n * Check if two scalars are equal\n * @static\n * @method eq\n * @param  {Number} a\n * @param  {Number} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\nfunction scalar_eq(a,b,precision){\n    precision = precision || 0;\n    return Math.abs(a-b) <= precision;\n}\n\n/**\n * Check if two points are equal\n * @static\n * @method points_eq\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\nfunction points_eq(a,b,precision){\n    return scalar_eq(a[0],b[0],precision) && scalar_eq(a[1],b[1],precision);\n}\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e((t=t||self).predicates={})}(this,function(t){\"use strict\";const e=134217729,n=33306690738754706e-32;function r(t,e,n,r,o){let f,i,u,c,s=e[0],a=r[0],d=0,l=0;a>s==a>-s?(f=s,s=e[++d]):(f=a,a=r[++l]);let p=0;if(d<t&&l<n)for(a>s==a>-s?(u=f-((i=s+f)-s),s=e[++d]):(u=f-((i=a+f)-a),a=r[++l]),f=i,0!==u&&(o[p++]=u);d<t&&l<n;)a>s==a>-s?(u=f-((i=f+s)-(c=i-f))+(s-c),s=e[++d]):(u=f-((i=f+a)-(c=i-f))+(a-c),a=r[++l]),f=i,0!==u&&(o[p++]=u);for(;d<t;)u=f-((i=f+s)-(c=i-f))+(s-c),s=e[++d],f=i,0!==u&&(o[p++]=u);for(;l<n;)u=f-((i=f+a)-(c=i-f))+(a-c),a=r[++l],f=i,0!==u&&(o[p++]=u);return 0===f&&0!==p||(o[p++]=f),p}function o(t){return new Float64Array(t)}const f=33306690738754716e-32,i=22204460492503146e-32,u=11093356479670487e-47,c=o(4),s=o(8),a=o(12),d=o(16),l=o(4);t.orient2d=function(t,o,p,b,y,h){const M=(o-h)*(p-y),x=(t-y)*(b-h),j=M-x;if(0===M||0===x||M>0!=x>0)return j;const m=Math.abs(M+x);return Math.abs(j)>=f*m?j:-function(t,o,f,p,b,y,h){let M,x,j,m,_,v,w,A,F,O,P,g,k,q,z,B,C,D;const E=t-b,G=f-b,H=o-y,I=p-y;_=(z=(A=E-(w=(v=e*E)-(v-E)))*(O=I-(F=(v=e*I)-(v-I)))-((q=E*I)-w*F-A*F-w*O))-(P=z-(C=(A=H-(w=(v=e*H)-(v-H)))*(O=G-(F=(v=e*G)-(v-G)))-((B=H*G)-w*F-A*F-w*O))),c[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),c[1]=k-(P+_)+(_-B),_=(D=g+P)-g,c[2]=g-(D-_)+(P-_),c[3]=D;let J=function(t,e){let n=e[0];for(let r=1;r<t;r++)n+=e[r];return n}(4,c),K=i*h;if(J>=K||-J>=K)return J;if(M=t-(E+(_=t-E))+(_-b),j=f-(G+(_=f-G))+(_-b),x=o-(H+(_=o-H))+(_-y),m=p-(I+(_=p-I))+(_-y),0===M&&0===x&&0===j&&0===m)return J;if(K=u*h+n*Math.abs(J),(J+=E*m+I*M-(H*j+G*x))>=K||-J>=K)return J;_=(z=(A=M-(w=(v=e*M)-(v-M)))*(O=I-(F=(v=e*I)-(v-I)))-((q=M*I)-w*F-A*F-w*O))-(P=z-(C=(A=x-(w=(v=e*x)-(v-x)))*(O=G-(F=(v=e*G)-(v-G)))-((B=x*G)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const L=r(4,c,4,l,s);_=(z=(A=E-(w=(v=e*E)-(v-E)))*(O=m-(F=(v=e*m)-(v-m)))-((q=E*m)-w*F-A*F-w*O))-(P=z-(C=(A=H-(w=(v=e*H)-(v-H)))*(O=j-(F=(v=e*j)-(v-j)))-((B=H*j)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const N=r(L,s,4,l,a);_=(z=(A=M-(w=(v=e*M)-(v-M)))*(O=m-(F=(v=e*m)-(v-m)))-((q=M*m)-w*F-A*F-w*O))-(P=z-(C=(A=x-(w=(v=e*x)-(v-x)))*(O=j-(F=(v=e*j)-(v-j)))-((B=x*j)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const Q=r(N,a,4,l,d);return d[Q-1]}(t,o,p,b,y,h,m)},t.orient2dfast=function(t,e,n,r,o,f){return(e-f)*(n-o)-(t-o)*(r-f)},Object.defineProperty(t,\"__esModule\",{value:!0})});\n","\nexport default class TinyQueue {\n    constructor(data = [], compare = defaultCompare) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let left = (pos << 1) + 1;\n            let best = data[left];\n            const right = left + 1;\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"$\" }]*/\n\"use strict\";\n\n/**\n * Point status enum\n * */\nconst StatusEnum = Object.freeze({\n\tPOINT_FREE_RED: -3,\n\tPOINT_FREE_BLUE: -2,\n\tPOINT_FREE: -1,\n\tPOINT_STARTING: 0,\n\tPOINT_IN_PATH: 1,\n\tPOINT_OWNED_BY_RED: 2,\n\tPOINT_OWNED_BY_BLUE: 3\n});\n\nfunction StatusEnumToString(enumVal) {\n\tswitch (enumVal) {\n\t\tcase StatusEnum.POINT_FREE_RED:\n\t\t\treturn Object.keys(StatusEnum)[0];\n\t\tcase StatusEnum.POINT_FREE_BLUE:\n\t\t\treturn Object.keys(StatusEnum)[1];\n\t\tcase StatusEnum.POINT_FREE:\n\t\t\treturn Object.keys(StatusEnum)[2];\n\t\tcase StatusEnum.POINT_STARTING:\n\t\t\treturn Object.keys(StatusEnum)[3];\n\t\tcase StatusEnum.POINT_IN_PATH:\n\t\t\treturn Object.keys(StatusEnum)[4];\n\t\tcase StatusEnum.POINT_OWNED_BY_RED:\n\t\t\treturn Object.keys(StatusEnum)[5];\n\t\tcase StatusEnum.POINT_OWNED_BY_BLUE:\n\t\t\treturn Object.keys(StatusEnum)[6];\n\n\t\tdefault:\n\t\t\tthrow new Error('bad status enum value');\n\t}\n}\n\nfunction StringToStatusEnum(enumStr) {\n\tswitch (enumStr.toUpperCase()) {\n\t\tcase Object.keys(StatusEnum)[0]:\n\t\t\treturn StatusEnum.POINT_FREE_RED;\n\t\tcase Object.keys(StatusEnum)[1]:\n\t\t\treturn StatusEnum.POINT_FREE_BLUE;\n\t\tcase Object.keys(StatusEnum)[2]:\n\t\t\treturn StatusEnum.POINT_FREE;\n\t\tcase Object.keys(StatusEnum)[3]:\n\t\t\treturn StatusEnum.POINT_STARTING;\n\t\tcase Object.keys(StatusEnum)[4]:\n\t\t\treturn StatusEnum.POINT_IN_PATH;\n\t\tcase Object.keys(StatusEnum)[5]:\n\t\t\treturn StatusEnum.POINT_OWNED_BY_RED;\n\t\tcase Object.keys(StatusEnum)[6]:\n\t\t\treturn StatusEnum.POINT_OWNED_BY_BLUE;\n\n\t\tdefault:\n\t\t\tthrow new Error('bad status enum string');\n\t}\n}\n\n/**\n * Shared log function\n * @param {any} msg - object to log\n */\nfunction LocalLog(msg) {\n\t// eslint-disable-next-line no-console\n\tconsole.log(msg);\n}\n\n/**\n * Shared error log functoin\n * @param {...any} args - objects to log\n */\nfunction LocalError(...args) {\n\tlet msg = '';\n\tfor (let i = 0; i < args.length; i++) {\n\t\tconst str = args[i];\n\t\tif (str)\n\t\t\tmsg += str;\n\t}\n\t// eslint-disable-next-line no-console\n\tconsole.error(msg);\n}\n\n/**\n * Based on http://www.faqs.org/faqs/graphics/algorithms-faq/\n * but mainly on http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n * returns != 0 if point is inside path\n * @param {number} npol points count\n * @param {number} xp x point coordinates\n * @param {number} yp y point coordinates\n * @param {number} x point to check x coordinate\n * @param {number} y point to check y coordinate\n * @returns {boolean} if point lies inside the polygon\n */\nfunction pnpoly(npol, xp, yp, x, y) {\n\tlet i, j, c = false;\n\tfor (i = 0, j = npol - 1; i < npol; j = i++) {\n\t\tif ((((yp[i] <= y) && (y < yp[j])) ||\n\t\t\t((yp[j] <= y) && (y < yp[i]))) &&\n\t\t\t(x < (xp[j] - xp[i]) * (y - yp[i]) / (yp[j] - yp[i]) + xp[i]))\n\n\t\t\tc = !c;\n\t}\n\treturn c;\n}\n\nfunction pnpoly2(pathPoints, x, y) {\n\tconst npol = pathPoints.length;\n\tlet i, j, c = false;\n\n\tfor (i = 0, j = npol - 1; i < npol; j = i++) {\n\t\tconst pi = pathPoints[i], pj = pathPoints[j];\n\n\t\tif ((((pi.y <= y) && (y < pj.y)) ||\n\t\t\t((pj.y <= y) && (y < pi.y))) &&\n\t\t\t(x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x))\n\n\t\t\tc = !c;\n\t}\n\treturn c;\n}\n\n/**\n * Test for array uniquness using default object comparator\n * @param {array} array of objects that are tested againstn uniqenes\n * @returns {boolean} true - has duplicates\n */\nfunction hasDuplicates(array) {\n\treturn (new Set(array)).size !== array.length;\n}\n\nasync function Sleep(ms) {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Sorting point clockwise/anticlockwise\n * @param {array} points array of points to sort\n * @returns {array} of points\n */\nfunction sortPointsClockwise(points) {\n\t//Modern\n\n\t// Get the center (mean value) using reduce\n\tconst center = points.reduce((acc, { x, y }) => {\n\t\tacc.x += x;\n\t\tacc.y += y;\n\t\treturn acc;\n\t}, { x: 0, y: 0 });\n\tcenter.x /= points.length;\n\tcenter.y /= points.length;\n\n\t// Add an angle property to each point using tan(angle) = y/x\n\tconst angles = points.map(({ x, y }) => {\n\t\treturn { x, y, angle: Math.atan2(y - center.y, x - center.x) * 180 / Math.PI };\n\t});\n\n\t// Sort your points by angle\n\tconst pointsSorted = angles.sort((a, b) => a.angle - b.angle);\n\treturn pointsSorted;\n}\n\n//////////////////////////////////////////////////////\n// SVG-VML mini graphic library \n// ==========================================\n// written by Gerard Ferrandez\n// initial version - June 28, 2006\n// modified - 2020 - Andrzej Pauli dropping vml - obsoleet and no support so why bother\n// modified - 2018-2020 - Andrzej Pauli polyline and oval functions & extensions\n// modified - July 21 - use object functions\n// modified - July 24 - debug\n// www.dhteumeuleu.com\n//////////////////////////////////////////////////////\nclass SvgVml {\n\tconstructor() {\n\t\tconst svgNS = \"http://www.w3.org/2000/svg\";\n\t\tlet svgAvailable = false, svgAntialias = undefined;\n\t\tlet documentCreateElementNS_SVG, documentCreateElementNS_Element;\n\t\tthis.cont = null;\n\t\t// Create an SVGPoint for future math\n\t\tthis.mathSVGPoint = null;\n\n\t\tif (self && self.document && self.document.createElementNS) {\n\t\t\tconst some_cont = document.createElementNS(svgNS, \"svg\");\n\t\t\tsvgAvailable = (some_cont.x !== null);\n\t\t}\n\n\t\tif (svgAvailable) {\n\t\t\t/* ============= displayable SVG ============== */\n\t\t\tdocumentCreateElementNS_SVG = function (contextElement) {\n\t\t\t\treturn contextElement;\n\t\t\t}.bind(this);\n\t\t\tdocumentCreateElementNS_Element = function (elemeName) {\n\t\t\t\tswitch (elemeName) {\n\t\t\t\t\tcase \"circle\":\n\t\t\t\t\tcase \"line\":\n\t\t\t\t\tcase \"polyline\":\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst o = document.createElementNS(svgNS, elemeName);\n\t\t\t\t\t\t\treturn o;\n\t\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`unknwn type ${elemeName}`);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\t/* ============= emulated SVG ============== */\n\t\t\tdocumentCreateElementNS_SVG = function () {\n\t\t\t\treturn {\n\t\t\t\t\tattributes: new Map(),\n\t\t\t\t\tchildren: [],\n\t\t\t\t\tsetAttributeNS: function (_nullish, key, val) {\n\t\t\t\t\t\tthis.attributes.set(key, val);\n\t\t\t\t\t},\n\t\t\t\t\tappendChild: function (val) {\n\t\t\t\t\t\tthis.children.push(val);\n\t\t\t\t\t},\n\t\t\t\t\tremoveChild: function (val) {\n\t\t\t\t\t\tconst index = this.children.indexOf(val);\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t\t/////////////// Pollyfills start ///////////////\n\t\t\tself.SVGCircleElement = function () {\n\t\t\t\tthis.attributes = new Map();\n\t\t\t};\n\t\t\tSVGCircleElement.prototype.setAttribute = function (key, val) {\n\t\t\t\tthis.attributes.set(key, val);\n\t\t\t};\n\t\t\tSVGCircleElement.prototype.getAttribute = function (key) {\n\t\t\t\treturn this.attributes.get(key);\n\t\t\t};\n\t\t\tSVGCircleElement.prototype.removeAttribute = function (key) {\n\t\t\t\tthis.attributes.delete(key);\n\t\t\t};\n\n\t\t\tself.SVGLineElement = function () {\n\t\t\t\tthis.attributes = new Map();\n\t\t\t};\n\t\t\tSVGLineElement.prototype.setAttribute = function (key, val) {\n\t\t\t\tthis.attributes.set(key, val);\n\t\t\t};\n\t\t\tSVGLineElement.prototype.getAttribute = function (key) {\n\t\t\t\treturn this.attributes.get(key);\n\t\t\t};\n\t\t\tSVGLineElement.prototype.removeAttribute = function (key) {\n\t\t\t\tthis.attributes.delete(key);\n\t\t\t};\n\n\t\t\tself.SVGPolylineElement = function () {\n\t\t\t\tthis.attributes = new Map();\n\t\t\t};\n\t\t\tSVGPolylineElement.prototype.setAttribute = function (key, val) {\n\t\t\t\tthis.attributes.set(key, val);\n\t\t\t};\n\t\t\tSVGPolylineElement.prototype.getAttribute = function (key) {\n\t\t\t\treturn this.attributes.get(key);\n\t\t\t};\n\t\t\tSVGPolylineElement.prototype.removeAttribute = function (key) {\n\t\t\t\tthis.attributes.delete(key);\n\t\t\t};\n\t\t\t/////////////// Pollyfills end ///////////////\n\n\t\t\tdocumentCreateElementNS_Element = function (elemeName) {\n\t\t\t\tswitch (elemeName) {\n\t\t\t\t\tcase \"circle\":\n\t\t\t\t\t\treturn new SVGCircleElement();\n\t\t\t\t\tcase \"line\":\n\t\t\t\t\t\treturn new SVGLineElement();\n\t\t\t\t\tcase \"polyline\":\n\t\t\t\t\t\treturn new SVGPolylineElement();\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`unknwn type ${elemeName}`);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tSVGCircleElement.prototype.move = function (x, y, radius) {\n\t\t\tthis.setAttribute(\"cx\", x);\n\t\t\tthis.setAttribute(\"cy\", y);\n\t\t\tthis.setAttribute(\"r\", radius);\n\t\t};\n\t\tSVGCircleElement.prototype.GetStrokeColor = function () { return this.getAttribute(\"stroke\"); };\n\t\tSVGCircleElement.prototype.SetStrokeColor = function (col) { this.setAttribute(\"stroke\", col); };\n\t\tSVGCircleElement.prototype.GetPosition = function () {\n\t\t\treturn { x: parseInt(this.getAttribute(\"cx\")), y: parseInt(this.getAttribute(\"cy\")) };\n\t\t};\n\t\tSVGCircleElement.prototype.GetFillColor = function () { return this.getAttribute(\"fill\"); };\n\t\tSVGCircleElement.prototype.SetFillColor = function (col) { this.setAttribute(\"fill\", col); };\n\t\tSVGCircleElement.prototype.GetStatus = function () {\n\t\t\treturn StringToStatusEnum(this.getAttribute(\"data-status\"));\n\t\t};\n\t\tSVGCircleElement.prototype.SetStatus = function (iStatus, saveOldPoint = false) {\n\t\t\tif (saveOldPoint) {\n\t\t\t\tconst old_status = StringToStatusEnum(this.getAttribute(\"data-status\"));\n\t\t\t\tthis.setAttribute(\"data-status\", StatusEnumToString(iStatus));\n\t\t\t\tif (old_status !== StatusEnum.POINT_FREE && old_status !== iStatus)\n\t\t\t\t\tthis.setAttribute(\"data-old-status\", StatusEnumToString(old_status));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setAttribute(\"data-status\", StatusEnumToString(iStatus));\n\t\t\t}\n\t\t};\n\t\tSVGCircleElement.prototype.RevertOldStatus = function () {\n\t\t\tconst old_status = this.getAttribute(\"data-old-status\");\n\t\t\tif (old_status) {\n\t\t\t\tthis.removeAttribute(\"data-old-status\");\n\t\t\t\tthis.setAttribute(\"data-status\", old_status);\n\t\t\t\treturn StringToStatusEnum(old_status);\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\t\tSVGCircleElement.prototype.GetZIndex = function () { return this.getAttribute(\"z-index\"); };\n\t\tSVGCircleElement.prototype.SetZIndex = function (val) { this.setAttribute(\"z-index\", val); };\n\t\tSVGCircleElement.prototype.Hide = function () { this.setAttribute(\"visibility\", 'hidden'); };\n\t\tSVGCircleElement.prototype.Show = function () { this.setAttribute(\"visibility\", 'visible'); };\n\t\tSVGCircleElement.prototype.strokeWeight = function (sw) { this.setAttribute(\"stroke-width\", sw); };\n\t\tSVGCircleElement.prototype.Serialize = function () {\n\t\t\tconst { x, y } = this.GetPosition();\n\t\t\tconst Status = this.GetStatus();\n\t\t\tconst Color = this.GetFillColor();\n\t\t\treturn { x, y, Status, Color };\n\t\t};\n\n\t\tSVGLineElement.prototype.move = function (x1, y1, x2, y2) {\n\t\t\tthis.setAttribute(\"x1\", x1);\n\t\t\tthis.setAttribute(\"y1\", y1);\n\t\t\tthis.setAttribute(\"x2\", x2);\n\t\t\tthis.setAttribute(\"y2\", y2);\n\t\t};\n\t\tSVGLineElement.prototype.RGBcolor = function (r, g, b) {\n\t\t\tthis.setAttribute(\"stroke\", `rgb(${Math.round(r)},${Math.round(g)},${Math.round(b)})`);\n\t\t};\n\t\tSVGLineElement.prototype.SetColor = function (color) { this.setAttribute(\"stroke\", color); };\n\t\tSVGLineElement.prototype.strokeWidth = function (sw) { this.setAttribute(\"stroke-width\", sw + \"px\"); };\n\n\t\tSVGPolylineElement.prototype.AppendPoints = function (x, y, diffX = 1, diffY = 1) {\n\t\t\tconst pts_str = this.getAttribute(\"points\");\n\t\t\tconst pts = pts_str.split(\" \");\n\n\t\t\tif (true === hasDuplicates(pts))\n\t\t\t\treturn false;\n\n\t\t\tlet arr;//obtain last point coords\n\t\t\tif (pts.length <= 1 || (arr = pts[pts.length - 1].split(\",\")).length !== 2)\n\t\t\t\treturn false;\n\n\t\t\tconst last_x = parseInt(arr[0]), last_y = parseInt(arr[1]);\n\t\t\tconst x_diff = parseInt(x), y_diff = parseInt(y);\n\t\t\tif (!(Math.abs(last_x - x_diff) <= diffX && Math.abs(last_y - y_diff) <= diffY))\n\t\t\t\treturn false;\n\n\t\t\tthis.setAttribute(\"points\", pts_str + ` ${x},${y}`);\n\t\t\treturn true;\n\t\t};\n\t\tSVGPolylineElement.prototype.RemoveLastPoint = function () {\n\t\t\tconst newpts = this.getAttribute(\"points\").replace(/(\\s\\d+,\\d+)$/, \"\");\n\t\t\tthis.setAttribute(\"points\", newpts);\n\t\t\treturn newpts;\n\t\t};\n\t\tSVGPolylineElement.prototype.ContainsPoint = function (x, y) {\n\t\t\tconst regexstr = new RegExp(`${x},${y}`, 'g');\n\t\t\tconst cnt = (this.getAttribute(\"points\").match(regexstr) || []).length;\n\t\t\treturn cnt;\n\t\t};\n\t\tSVGPolylineElement.prototype.GetPointsString = function () {\n\t\t\treturn this.getAttribute(\"points\");\n\t\t};\n\t\tSVGPolylineElement.prototype.GetPointsArray = function () {\n\t\t\t//x0,y0 x1,y1 x2,y2\n\t\t\treturn this.getAttribute(\"points\").split(\" \").map(function (pt) {\n\t\t\t\tconst [x, y] = pt.split(',');\n\t\t\t\treturn { x: parseInt(x), y: parseInt(y) };\n\t\t\t});\n\t\t};\n\t\tSVGPolylineElement.prototype.SetPoints = function (sPoints) {\n\t\t\tthis.setAttribute(\"points\", sPoints);\n\t\t};\n\t\tSVGPolylineElement.prototype.GetIsClosed = function () {\n\t\t\tconst pts = this.getAttribute(\"points\").split(\" \");\n\t\t\treturn pts[0] === pts[pts.length - 1];\n\t\t};\n\t\tSVGPolylineElement.prototype.GetLength = function () {\n\t\t\treturn this.getAttribute(\"points\").split(\" \").length;\n\t\t};\n\t\tSVGPolylineElement.prototype.SetWidthAndColor = function (sw, col) {\n\t\t\tthis.setAttribute(\"stroke\", col);\n\t\t\tthis.setAttribute(\"fill\", col);\n\t\t\tthis.setAttribute(\"stroke-width\", sw);\n\t\t};\n\t\tSVGPolylineElement.prototype.GetID = function () { return parseInt(this.getAttribute(\"data-id\")); };\n\t\tSVGPolylineElement.prototype.SetID = function (iID) { this.setAttribute(\"data-id\", iID); };\n\t\tSVGPolylineElement.prototype.GetFillColor = function () { return this.getAttribute(\"fill\"); };\n\t\tSVGPolylineElement.prototype.Serialize = function () {\n\t\t\tconst id = this.GetID();\n\t\t\tconst color = this.GetFillColor();\n\t\t\tconst pts = this.GetPointsString();\n\t\t\treturn { iId: id, Color: color, PointsAsString: pts };\n\t\t};\n\n\t\tthis.CreateSVGVML = function (contextElement, iWidth, iHeight, { iGridWidth, iGridHeight }, antialias) {\n\t\t\tthis.cont = documentCreateElementNS_SVG(contextElement);\n\t\t\tif (iWidth)\n\t\t\t\tthis.cont.setAttributeNS(null, 'width', iWidth);\n\t\t\tif (iHeight)\n\t\t\t\tthis.cont.setAttributeNS(null, 'height', iHeight);\n\t\t\tif (contextElement) {\n\t\t\t\tif (iGridWidth !== undefined && iGridHeight !== undefined)\n\t\t\t\t\tthis.cont.setAttribute(\"viewBox\", `0 0 ${iGridWidth} ${iGridHeight}`);\n\n\t\t\t\tthis.mathSVGPoint = this.cont.createSVGPoint();\n\t\t\t}\n\t\t\tsvgAntialias = antialias;\n\n\t\t\treturn svgAvailable ? this.cont : null;\n\t\t};\n\t\tthis.CreateLine = function (w, col, linecap) {\n\t\t\tconst o = documentCreateElementNS_Element(\"line\");\n\t\t\tif (svgAntialias !== undefined)\n\t\t\t\to.setAttribute(\"shape-rendering\", svgAntialias === true ? \"auto\" : \"optimizeSpeed\");\n\t\t\to.setAttribute(\"stroke-width\", w + \"px\");\n\t\t\tif (col) o.setAttribute(\"stroke\", col);\n\t\t\tif (linecap) o.setAttribute(\"stroke-linecap\", linecap);\n\n\t\t\tthis.cont.appendChild(o);\n\t\t\treturn o;\n\t\t};\n\t\tthis.CreatePolyline = function (width, points, col) {\n\t\t\tconst o = documentCreateElementNS_Element(\"polyline\");\n\t\t\tif (svgAntialias !== undefined)\n\t\t\t\to.setAttribute(\"shape-rendering\", svgAntialias === true ? \"auto\" : \"optimizeSpeed\");\n\t\t\to.setAttribute(\"stroke-width\", width);\n\t\t\tif (col) o.setAttribute(\"stroke\", col);\n\t\t\to.setAttribute(\"fill\", col);\n\t\t\to.setAttribute(\"fill-opacity\", \"0.1\");\n\t\t\tif (points) o.setAttribute(\"points\", points);\n\t\t\to.setAttribute(\"stroke-linecap\", \"round\");\n\t\t\to.setAttribute(\"stroke-linejoin\", \"round\");\n\t\t\to.setAttribute(\"data-id\", 0);\n\n\t\t\tthis.cont.appendChild(o);\n\t\t\treturn o;\n\t\t};\n\t\tthis.CreateOval = function (diam) {\n\t\t\tconst o = documentCreateElementNS_Element(\"circle\");\n\t\t\tif (svgAntialias !== undefined)\n\t\t\t\to.setAttribute(\"shape-rendering\", svgAntialias === true ? \"auto\" : \"optimizeSpeed\");\n\t\t\to.setAttribute(\"stroke-width\", 0);\n\t\t\to.setAttribute(\"r\", diam / 2);\n\t\t\t//ch_commented o.style.cursor = \"pointer\";\n\t\t\to.setAttribute(\"data-status\", StatusEnumToString(StatusEnum.POINT_FREE));\n\t\t\t//o.setAttribute(\"data-old-status\", StatusEnumToString(StatusEnum.POINT_FREE));\n\n\t\t\tthis.cont.appendChild(o);\n\t\t\treturn o;\n\t\t};\n\t}\n\n\tRemoveOval(oval) {\n\t\tthis.cont.removeChild(oval);\n\t}\n\n\tRemovePolyline(polyline) {\n\t\tthis.cont.removeChild(polyline);\n\t}\n\n\tDeserializeOval(packed, radius = 4) {\n\t\tlet { x, y, Status, Color } = packed;\n\t\tx = parseInt(x);\n\t\ty = parseInt(y);\n\t\tconst o = this.CreateOval(radius);\n\t\to.move(x, y, radius);\n\t\to.SetStrokeColor(Color);\n\t\to.SetFillColor(Color);\n\t\to.SetStatus(Status);\n\t\treturn o;\n\t}\n\n\tDeserializePolyline(packed, width = 3) {\n\t\tconst { iId, Color, PointsAsString } = packed;\n\t\tconst o = this.CreatePolyline(width, PointsAsString, Color);\n\t\to.SetID(iId);\n\t\treturn o;\n\t}\n\n\t/**\n\t * Converts coordinates point from screen to scaled SVG as according to\n\t * https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/samples/hh535760(v=vs.85)?redirectedfrom=MSDN\n\t * https://stackoverflow.com/questions/22183727/how-do-you-convert-screen-coordinates-to-document-space-in-a-scaled-svg\n\t * @param {number} clientX X coordinate\n\t * @param {number} clientY Y coordinate\n\t * @returns {object} coordinate {x,y} point\n\t */\n\tToCursorPoint(clientX, clientY) {\n\t\t// Get point in global SVG space\n\t\tthis.mathSVGPoint.x = clientX; this.mathSVGPoint.y = clientY;\n\t\tconst loc = this.mathSVGPoint.matrixTransform(this.cont.getScreenCTM().inverse());\n\n\t\treturn loc;\n\t}\n}\n\nclass GameStateStore {\n\tconstructor(useIndexedDb, pointCreationCallbackFn = null, pathCreationCallbackFn = null, getGameStateFn = null, version = \"\") {\n\t\tif (useIndexedDb) {\n\t\t\tif (!('indexedDB' in self)) {\n\t\t\t\tLocalError(\"This browser doesn't support IndexedDB\");\n\t\t\t\tuseIndexedDb = false;\n\t\t\t}\n\t\t\telse\n\t\t\t\tuseIndexedDb = true;\n\t\t}\n\t\telse\n\t\t\tuseIndexedDb = false;\n\n\t\t/////////inner class definitions start/////////\n\t\t/////////https://stackoverflow.com/questions/28784375/nested-es6-classes/////////\n\t\tconst SimplePointStoreDefinition = class SimplePointStore {\n\t\t\tconstructor() {\n\t\t\t\tthis.store = new Map();\n\t\t\t}\n\n\t\t\tasync PrepareStore() {\n\t\t\t\treturn true;//dummy\n\t\t\t}\n\n\t\t\tasync BeginBulkStorage() {\n\t\t\t\t//dummy\n\t\t\t}\n\n\t\t\tasync EndBulkStorage() {\n\t\t\t\t//dummy\n\t\t\t}\n\n\t\t\tasync has(key) {\n\t\t\t\treturn this.store.has(key);\n\t\t\t}\n\n\t\t\tasync set(key, val) {\n\t\t\t\treturn this.store.set(key, val);\n\t\t\t}\n\n\t\t\tasync get(key) {\n\t\t\t\treturn this.store.get(key);\n\t\t\t}\n\n\t\t\tasync values() {\n\t\t\t\treturn this.store.values();\n\t\t\t}\n\n\t\t\tasync count() {\n\t\t\t\treturn this.store.size;\n\t\t\t}\n\t\t};\n\n\t\tconst SimplePathStoreDefinition = class SimplePathStore {\n\t\t\tconstructor() {\n\t\t\t\tthis.store = [];\n\t\t\t}\n\n\t\t\tasync PrepareStore() {\n\t\t\t\treturn true;//dummy\n\t\t\t}\n\n\t\t\tasync BeginBulkStorage() {\n\t\t\t\t//dummy\n\t\t\t}\n\n\t\t\tasync EndBulkStorage() {\n\t\t\t\t//dummy\n\t\t\t}\n\n\t\t\tasync push(obj) {\n\t\t\t\treturn this.store.push(obj);\n\t\t\t}\n\n\t\t\tasync all() {\n\t\t\t\treturn this.store;\n\t\t\t}\n\n\t\t\tasync count() {\n\t\t\t\treturn this.store.length;\n\t\t\t}\n\t\t};\n\n\t\tconst IDBPointStoreDefinition = class IDBPointStore extends SimplePointStoreDefinition {\n\t\t\tconstructor(mainGameStateStore, pointCreationCallbackFn, getGameStateFn) {\n\t\t\t\tsuper();\n\t\t\t\tthis.MainGameStateStore = mainGameStateStore;\n\t\t\t\tthis.GetPoint = mainGameStateStore.GetPoint.bind(this.MainGameStateStore);\n\t\t\t\tthis.StorePoint = mainGameStateStore.StorePoint.bind(this.MainGameStateStore);\n\t\t\t\tthis.GetAllPoints = mainGameStateStore.GetAllPoints.bind(this.MainGameStateStore);\n\t\t\t\tthis.UpdateState = mainGameStateStore.UpdateState.bind(this.MainGameStateStore);\n\t\t\t\tthis.PointCreationCallback = pointCreationCallbackFn;\n\t\t\t\tthis.GetGameStateCallback = getGameStateFn;\n\t\t\t}\n\n\t\t\tasync PrepareStore() {\n\t\t\t\tif (this.PointCreationCallback && this.GetGameStateCallback) {\n\t\t\t\t\tconst points = await this.GetAllPoints();\n\t\t\t\t\tconst game_state = this.GetGameStateCallback();\n\n\t\t\t\t\t//loading points from indexeddb\n\t\t\t\t\tfor (const idb_pt of points) {\n\t\t\t\t\t\tconst pt = await this.PointCreationCallback(idb_pt.x, idb_pt.y, idb_pt.Status, idb_pt.Color);\n\t\t\t\t\t\tconst index = idb_pt.y * game_state.iGridWidth + idb_pt.x;\n\t\t\t\t\t\tthis.store.set(index, pt);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tasync BeginBulkStorage() {\n\t\t\t\tawait this.MainGameStateStore.BeginBulkStorage(this.MainGameStateStore.DB_POINT_STORE, 'readwrite');\n\n\t\t\t\tif (this.MainGameStateStore.pointBulkBuffer === null)\n\t\t\t\t\tthis.MainGameStateStore.pointBulkBuffer = new Map();\n\t\t\t}\n\n\t\t\tasync EndBulkStorage() {\n\t\t\t\tawait this.MainGameStateStore.StoreAllPoints();\n\n\t\t\t\tawait this.MainGameStateStore.EndBulkStorage(this.MainGameStateStore.DB_POINT_STORE);\n\t\t\t}\n\n\t\t\tasync has(key) {\n\t\t\t\t//const pt = await GetPoint(key);\n\t\t\t\t//return pt !== undefined && pt !== null;\n\t\t\t\treturn this.store.has(key);\n\t\t\t}\n\n\t\t\tasync set(key, oval) {\n\t\t\t\tconst game_state = this.GetGameStateCallback();\n\n\t\t\t\tconst pos = oval.GetPosition();\n\t\t\t\tconst color = oval.GetFillColor();\n\t\t\t\tconst idb_pt = {\n\t\t\t\t\tx: pos.x,\n\t\t\t\t\ty: pos.y,\n\t\t\t\t\tStatus: oval.GetStatus(),\n\t\t\t\t\tColor: color\n\t\t\t\t};\n\n\t\t\t\tawait this.StorePoint(key, idb_pt);\n\n\t\t\t\tif (this.UpdateState) {\n\t\t\t\t\tif (game_state.bPointsAndPathsLoaded === true)\n\t\t\t\t\t\tawait this.UpdateState(game_state.iGameID, game_state);\n\t\t\t\t}\n\n\t\t\t\treturn this.store.set(key, oval);\n\t\t\t}\n\n\t\t\tasync get(key) {\n\t\t\t\tlet val = this.store.get(key);\n\t\t\t\t//if (!val) {\n\t\t\t\t//\tconst idb_pt = await this.GetPoint(key);\n\t\t\t\t//\tif (idb_pt && this.PointCreationCallback) {\n\t\t\t\t//\t\tval = this.PointCreationCallback(idb_pt.x, idb_pt.y, idb_pt.Status, idb_pt.Color);\n\t\t\t\t//\t\tthis.store.set(key, val);\n\t\t\t\t//\t\treturn val;\n\t\t\t\t//\t}\n\t\t\t\t//\telse\n\t\t\t\t//\t\treturn undefined;\n\t\t\t\t//}\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\tasync values() {\n\t\t\t\tlet values = this.store.values();\n\t\t\t\tif (values)\n\t\t\t\t\treturn values;\n\t\t\t\tvalues = await this.GetAllPoints();\n\t\t\t\treturn values;\n\t\t\t}\n\t\t};\n\n\t\tconst IDBPathStoreDefinition = class IDBPathStore extends SimplePathStoreDefinition {\n\t\t\tconstructor(mainGameStateStore, pathCreationCallbackFn, getGameStateFn) {\n\t\t\t\tsuper();\n\t\t\t\tthis.MainGameStateStore = mainGameStateStore;\n\t\t\t\tthis.GetAllPaths = mainGameStateStore.GetAllPaths.bind(this.MainGameStateStore);\n\t\t\t\tthis.StorePath = mainGameStateStore.StorePath.bind(this.MainGameStateStore);\n\t\t\t\tthis.UpdateState = mainGameStateStore.UpdateState.bind(this.MainGameStateStore);\n\t\t\t\tthis.PathCreationCallback = pathCreationCallbackFn;\n\t\t\t\tthis.GetGameStateCallback = getGameStateFn;\n\t\t\t}\n\n\t\t\tasync PrepareStore() {\n\t\t\t\tif (this.PathCreationCallback) {\n\t\t\t\t\tconst paths = await this.GetAllPaths();\n\t\t\t\t\t//loading paths from indexeddb\n\t\t\t\t\tfor (const idb_pa of paths) {\n\t\t\t\t\t\tconst pa = await this.PathCreationCallback(idb_pa.PointsAsString, idb_pa.Color, idb_pa.iId);\n\t\t\t\t\t\tthis.store.push(pa);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tasync BeginBulkStorage() {\n\t\t\t\tawait this.MainGameStateStore.BeginBulkStorage([this.MainGameStateStore.DB_POINT_STORE, this.MainGameStateStore.DB_PATH_STORE], 'readwrite');\n\n\t\t\t\tif (this.MainGameStateStore.pathBulkBuffer === null)\n\t\t\t\t\tthis.MainGameStateStore.pathBulkBuffer = new Map();\n\t\t\t}\n\n\t\t\tasync EndBulkStorage() {\n\t\t\t\tawait this.MainGameStateStore.StoreAllPaths();\n\n\t\t\t\tawait this.MainGameStateStore.EndBulkStorage([this.MainGameStateStore.DB_POINT_STORE, this.MainGameStateStore.DB_PATH_STORE]);\n\t\t\t}\n\n\t\t\tasync push(val) {\n\t\t\t\tconst game_state = this.GetGameStateCallback();\n\n\t\t\t\tconst id_key = val.GetID();\n\t\t\t\tconst idb_path = {\n\t\t\t\t\tiId: id_key,\n\t\t\t\t\tColor: val.GetFillColor(),\n\t\t\t\t\tPointsAsString: val.GetPointsString().split(\" \").map((pt) => {\n\t\t\t\t\t\tconst tab = pt.split(',');\n\t\t\t\t\t\tconst x = parseInt(tab[0]), y = parseInt(tab[1]);\n\t\t\t\t\t\treturn `${x},${y}`;\n\t\t\t\t\t}).join(\" \")\n\t\t\t\t};\n\n\t\t\t\tawait this.StorePath(id_key, idb_path);\n\n\t\t\t\tif (this.UpdateState) {\n\t\t\t\t\tif (game_state.bPointsAndPathsLoaded === true)\n\t\t\t\t\t\tawait this.UpdateState(game_state.iGameID, game_state);\n\t\t\t\t}\n\n\t\t\t\treturn this.store.push(val);\n\t\t\t}\n\n\t\t\tasync all() {\n\t\t\t\tlet values = this.store;\n\t\t\t\tif (values)\n\t\t\t\t\treturn values;\n\t\t\t\tvalues = await this.GetAllPaths();\n\t\t\t\treturn values;\n\t\t\t}\n\t\t};\n\t\t/////////inner class definitions end/////////\n\n\t\tif (useIndexedDb === true) {\n\t\t\tthis.DB_NAME = 'InkballGame';\n\t\t\tthis.DB_POINT_STORE = 'points';\n\t\t\tthis.DB_PATH_STORE = 'paths';\n\t\t\tthis.DB_STATE_STORE = 'state';\n\t\t\tthis.g_DB = null;//main DB object\n\t\t\tthis.bulkStores = null;\n\t\t\tthis.pointBulkBuffer = null;\n\t\t\tthis.pathBulkBuffer = null;\n\n\t\t\t// Use a long long for this value (don't use a float)\n\t\t\tif (!version || version === \"\" || version.length <= 0)\n\t\t\t\tthis.DB_VERSION = null;\n\t\t\telse {\n\t\t\t\tthis.DB_VERSION = parseInt(version.split('.').reduce((acc, val) => {\n\t\t\t\t\tval = parseInt(val);\n\t\t\t\t\treturn acc * 10 + (isNaN(val) ? 0 : val);\n\t\t\t\t}, 0)) - 1010/*initial module versioning start number*/ + 4/*initial indexDB start number*/;\n\t\t\t}\n\n\t\t\tthis.PointStore = new IDBPointStoreDefinition(this, pointCreationCallbackFn, getGameStateFn);\n\t\t\tthis.PathStore = new IDBPathStoreDefinition(this, pathCreationCallbackFn, getGameStateFn);\n\t\t}\n\t\telse {\n\t\t\tthis.PointStore = new SimplePointStoreDefinition();\n\t\t\tthis.PathStore = new SimplePathStoreDefinition();\n\t\t}\n\t}\n\n\tGetPointStore() {\n\t\treturn this.PointStore;\n\t}\n\n\tGetPathStore() {\n\t\treturn this.PathStore;\n\t}\n\n\tasync OpenDb() {\n\t\tLocalLog(\"OpenDb ...\");\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet req;\n\t\t\tif (this.DB_VERSION !== null)\n\t\t\t\treq = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n\t\t\telse\n\t\t\t\treq = indexedDB.open(this.DB_NAME);\n\n\t\t\treq.onsuccess = function (evt) {\n\t\t\t\t// Equal to: db = req.result;\n\t\t\t\tthis.g_DB = evt.currentTarget.result;\n\n\t\t\t\tLocalLog(\"OpenDb DONE\");\n\t\t\t\tresolve(evt.currentTarget.result);\n\t\t\t}.bind(this);\n\t\t\treq.onerror = function (evt) {\n\t\t\t\tLocalError(\"OpenDb:\", evt.target.errorCode || evt.target.error);\n\t\t\t\treject();\n\t\t\t}.bind(this);\n\t\t\treq.onupgradeneeded = function (evt) {\n\t\t\t\tLocalLog(`OpenDb.onupgradeneeded(version: ${this.DB_VERSION})`);\n\n\t\t\t\tconst store_list = Array.from(evt.currentTarget.result.objectStoreNames);\n\t\t\t\tif (store_list.includes(this.DB_POINT_STORE))\n\t\t\t\t\tevt.currentTarget.result.deleteObjectStore(this.DB_POINT_STORE);\n\t\t\t\tif (store_list.includes(this.DB_PATH_STORE))\n\t\t\t\t\tevt.currentTarget.result.deleteObjectStore(this.DB_PATH_STORE);\n\t\t\t\tif (store_list.includes(this.DB_STATE_STORE))\n\t\t\t\t\tevt.currentTarget.result.deleteObjectStore(this.DB_STATE_STORE);\n\n\t\t\t\tevt.currentTarget.result.createObjectStore(\n\t\t\t\t\tthis.DB_POINT_STORE, { /*keyPath: 'pos',*/ autoIncrement: false });\n\t\t\t\t//point_store.createIndex('Status', 'Status', { unique: false });\n\t\t\t\t//point_store.createIndex('Color', 'Color', { unique: false });\n\n\n\t\t\t\tevt.currentTarget.result.createObjectStore(\n\t\t\t\t\tthis.DB_PATH_STORE, { /*keyPath: 'iId',*/ autoIncrement: false });\n\t\t\t\t//path_store.createIndex('Color', 'Color', { unique: false });\n\n\t\t\t\tevt.currentTarget.result.createObjectStore(\n\t\t\t\t\tthis.DB_STATE_STORE, { /*keyPath: 'gameId',*/ autoIncrement: false });\n\t\t\t}.bind(this);\n\t\t});\n\t}\n\n\t/**\n\t  * @param {string} storeName is a store name\n\t  * @param {string} mode either \"readonly\" or \"readwrite\"\n\t  * @returns {object} store\n\t  */\n\tGetObjectStore(storeName, mode) {\n\t\tif (this.bulkStores !== null && this.bulkStores.has(storeName))\n\t\t\treturn this.bulkStores.get(storeName);\n\n\t\tconst tx = this.g_DB.transaction(storeName, mode);\n\t\treturn tx.objectStore(storeName);\n\t}\n\n\tasync ClearAllStores() {\n\t\tconst clearObjectStore = async function (storeName) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst store = this.GetObjectStore(storeName, 'readwrite');\n\t\t\t\tconst req = store.clear();\n\t\t\t\treq.onsuccess = function () {\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t\treq.onerror = function (evt) {\n\t\t\t\t\tLocalError(\"clearObjectStore:\", evt.target.errorCode);\n\t\t\t\t\treject();\n\t\t\t\t};\n\t\t\t});\n\t\t}.bind(this);\n\n\t\tawait Promise.all([\n\t\t\tclearObjectStore(this.DB_POINT_STORE),\n\t\t\tclearObjectStore(this.DB_PATH_STORE),\n\t\t\tclearObjectStore(this.DB_STATE_STORE)\n\t\t]);\n\t}\n\n\t/**\n\t  * @param {number} key is calculated inxed of point y * width + x, probably not usefull\n\t  */\n\tasync GetPoint(key) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_POINT_STORE, 'readonly');\n\t\t\tconst req = store.get(key);\n\t\t\treq.onerror = function (event) {\n\t\t\t\treject(new Error('GetPoint => ' + event));\n\t\t\t};\n\t\t\treq.onsuccess = function (event) {\n\t\t\t\tresolve(event.target.result);\n\t\t\t};\n\t\t});\n\t}\n\n\tasync GetAllPoints() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_POINT_STORE, 'readonly');\n\t\t\tconst bucket = [];\n\t\t\tconst req = store.openCursor();\n\t\t\treq.onsuccess = function (event) {\n\t\t\t\tconst cursor = event.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tbucket.push(cursor.value);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tresolve(bucket);\n\t\t\t};\n\t\t\treq.onerror = function (event) {\n\t\t\t\treject(new Error('GetAllPoints => ' + event));\n\t\t\t};\n\t\t});\n\t}\n\n\tasync GetState(key) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_STATE_STORE, 'readonly');\n\t\t\tconst req = store.get(key);\n\t\t\treq.onerror = function (event) {\n\t\t\t\treject(new Error('GetState => ' + event));\n\t\t\t};\n\t\t\treq.onsuccess = function (event) {\n\t\t\t\tresolve(event.target.result);\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t  * @param {number} key is path Id\n\t  */\n\tasync GetPath(key) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_PATH_STORE, 'readonly');\n\t\t\tconst req = store.get(key);\n\t\t\treq.onerror = function (event) {\n\t\t\t\treject(new Error('GetPath => ' + event));\n\t\t\t};\n\t\t\treq.onsuccess = function (event) {\n\t\t\t\tresolve(event.target.result);\n\t\t\t};\n\t\t});\n\t}\n\n\tasync GetAllPaths() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_PATH_STORE, 'readonly');\n\t\t\tconst bucket = [];\n\t\t\tconst req = store.openCursor();\n\t\t\treq.onsuccess = function (event) {\n\t\t\t\tconst cursor = event.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tbucket.push(cursor.value);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tresolve(bucket);\n\t\t\t};\n\t\t\treq.onerror = function (event) {\n\t\t\t\treject(new Error('GetAllPaths => ' + event));\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t  * @param {number} key is calculated inxed of point y * width + x, probably not usefull\n\t  * @param {object} val is serialized, thin circle\n\t  */\n\tasync StorePoint(key, val) {\n\t\tif (this.bulkStores !== null && this.bulkStores.has(this.DB_POINT_STORE)) {\n\t\t\tif (this.pointBulkBuffer === null)\n\t\t\t\tthis.pointBulkBuffer = new Map();\n\t\t\tthis.pointBulkBuffer.set(key, val);\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_POINT_STORE, 'readwrite');\n\t\t\tlet req;\n\t\t\ttry {\n\t\t\t\treq = store.put(val, key);//earlier was 'add'\n\t\t\t} catch (e) {\n\t\t\t\tif (e.name === 'DataCloneError')\n\t\t\t\t\tLocalError(\"This engine doesn't know how to clone a Blob, use Firefox\");\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\treq.onsuccess = function () {\n\t\t\t\tresolve();\n\t\t\t};\n\t\t\treq.onerror = function () {\n\t\t\t\tLocalError(\"StorePoint error\", this.error);\n\t\t\t\treject();\n\t\t\t};\n\t\t});\n\t}\n\n\tasync StoreAllPoints(values = null) {\n\t\tif (!values)\n\t\t\tvalues = this.pointBulkBuffer;\n\n\t\tif (!values || this.bulkStores === null)\n\t\t\treturn Promise.reject();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_POINT_STORE, 'readwrite');\n\t\t\ttry {\n\t\t\t\tvalues.forEach(function (v, key) {\n\t\t\t\t\tstore.add(v, key);\n\t\t\t\t});\n\n\t\t\t\tthis.pointBulkBuffer = null;\n\t\t\t\tresolve();\n\t\t\t} catch (e) {\n\t\t\t\tLocalError(\"This engine doesn't know how to clone a Blob, use Firefox\");\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t  * @param {number} key is GameID\n\t  * @param {object} gameState is InkBallGame state object\n\t  */\n\tasync StoreState(key, gameState) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_STATE_STORE, 'readwrite');\n\t\t\tlet req;\n\t\t\ttry {\n\t\t\t\treq = store.add(gameState, key);\n\t\t\t} catch (e) {\n\t\t\t\tif (e.name === 'DataCloneError')\n\t\t\t\t\tLocalError(\"This engine doesn't know how to clone a Blob, use Firefox\");\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\treq.onsuccess = function () {\n\t\t\t\tresolve();\n\t\t\t};\n\t\t\treq.onerror = function () {\n\t\t\t\tLocalError(\"StoreState error\", this.error);\n\t\t\t\treject();\n\t\t\t};\n\t\t});\n\t}\n\n\tasync UpdateState(key, gameState) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_STATE_STORE, 'readwrite');\n\t\t\tlet req;\n\t\t\ttry {\n\t\t\t\treq = store.put(gameState, key);\n\t\t\t} catch (e) {\n\t\t\t\tif (e.name === 'DataCloneError')\n\t\t\t\t\tLocalError(\"This engine doesn't know how to clone a Blob, use Firefox\");\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\treq.onsuccess = function () {\n\t\t\t\tresolve();\n\t\t\t};\n\t\t\treq.onerror = function () {\n\t\t\t\tLocalError(\"UpdateState error\", this.error);\n\t\t\t\treject();\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t  * @param {number} key is path Id\n\t  * @param {object} val is serialized thin path\n\t  */\n\tasync StorePath(key, val) {\n\t\tif (this.bulkStores !== null && this.bulkStores.has(this.DB_PATH_STORE)) {\n\t\t\tif (this.pathBulkBuffer === null)\n\t\t\t\tthis.pathBulkBuffer = new Map();\n\t\t\tthis.pathBulkBuffer.set(key, val);\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_PATH_STORE, 'readwrite');\n\t\t\tlet req;\n\t\t\ttry {\n\t\t\t\treq = store.add(val, key);\n\t\t\t} catch (e) {\n\t\t\t\tif (e.name === 'DataCloneError')\n\t\t\t\t\tLocalError(\"This engine doesn't know how to clone a Blob, use Firefox\");\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\treq.onsuccess = function () {\n\t\t\t\tresolve();\n\t\t\t};\n\t\t\treq.onerror = function () {\n\t\t\t\tLocalError(\"StorePath error\", this.error);\n\t\t\t\treject();\n\t\t\t};\n\t\t});\n\t}\n\n\tasync StoreAllPaths(values = null) {\n\t\tif (!values)\n\t\t\tvalues = this.pathBulkBuffer;\n\n\t\tif (!values || this.bulkStores === null)\n\t\t\treturn Promise.reject();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst store = this.GetObjectStore(this.DB_PATH_STORE, 'readwrite');\n\t\t\ttry {\n\t\t\t\tvalues.forEach(function (v, key) {\n\t\t\t\t\tstore.add(v, key);\n\t\t\t\t});\n\n\t\t\t\tthis.pathBulkBuffer = null;\n\t\t\t\tresolve();\n\t\t\t} catch (e) {\n\t\t\t\tLocalError(\"This engine doesn't know how to clone a Blob, use Firefox\");\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync PrepareStore() {\n\t\t//detecting if we have IndexedDb advanced store (only checking point-store); otherwise, there is no point in going further\n\t\tif (!this.PointStore.GetAllPoints) return false;\n\n\t\tif (this.g_DB === null)\n\t\t\tawait this.OpenDb();\n\t\telse\n\t\t\treturn false;//all initiated, just exit\n\n\t\tconst game_state = this.PointStore.GetGameStateCallback();\n\t\tconst idb_state = await this.GetState(game_state.iGameID);\n\t\tif (!idb_state) {\n\t\t\t//no state entry in db\n\t\t\tawait this.ClearAllStores();\n\n\t\t\tawait this.StoreState(game_state.iGameID, game_state);\n\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\t//Verify date of last move and decide whether to need pull points from signalR\n\t\t\t//Both datetimes should be ISO UTC\n\t\t\tif (idb_state.sLastMoveGameTimeStamp !== game_state.sLastMoveGameTimeStamp) {\n\n\t\t\t\tawait this.ClearAllStores();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (game_state.bPointsAndPathsLoaded === false) {\n\t\t\t\t//db entry ok and ready for read\n\t\t\t\ttry {\n\t\t\t\t\tawait this.BeginBulkStorage([this.DB_POINT_STORE, this.DB_PATH_STORE], 'readonly');\n\n\t\t\t\t\tif ((await this.PointStore.PrepareStore()) !== true || (await this.PathStore.PrepareStore()) !== true) {\n\n\t\t\t\t\t\tawait this.ClearAllStores();\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t} finally {\n\t\t\t\t\tawait this.EndBulkStorage([this.DB_POINT_STORE, this.DB_PATH_STORE]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Load all needed stores upfront\n\t * @param {any} storeName array or string of store to load\n\t * @param {any} mode - readonly/readwrite\n\t */\n\tasync BeginBulkStorage(storeName, mode) {\n\t\tif (this.bulkStores === null)\n\t\t\tthis.bulkStores = new Map();\n\n\t\tconst keys = Array.isArray(storeName) ? storeName : [storeName];\n\t\tlet tx = null;\n\t\tfor (const key of keys) {\n\t\t\tif (!this.bulkStores.has(key)) {\n\t\t\t\tif (tx === null)\n\t\t\t\t\ttx = this.g_DB.transaction(keys, mode);\n\t\t\t\tthis.bulkStores.set(key, tx.objectStore(key));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync EndBulkStorage(storeName) {\n\t\tif (this.bulkStores !== null) {\n\t\t\tconst keys = Array.isArray(storeName) ? storeName : [storeName];\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (this.bulkStores.has(key)) {\n\t\t\t\t\tthis.bulkStores.delete(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.bulkStores.size <= 0)\n\t\t\t\tthis.bulkStores = null;\n\t\t}\n\t}\n}\n\n\nexport {\n\tSvgVml, StatusEnum, pnpoly, pnpoly2, LocalLog, LocalError,\n\thasDuplicates, sortPointsClockwise, Sleep,\n\tGameStateStore\n};\n","import concaveman from \"concaveman\";\nimport decomp from \"poly-decomp\";\nimport { StatusEnum, LocalLog, sortPointsClockwise, /*Sleep,*/ pnpoly2 } from \"./shared.js\";\n\n\n/**\n * AI operations class\n * */\nclass GraphAI {\n\tconstructor(iGridWidth, iGridHeight, pointStore) {\n\t\tthis.m_iGridWidth = iGridWidth;\n\t\tthis.m_iGridHeight = iGridHeight;\n\t\tthis.m_Points = pointStore;\n\t\tthis.POINT_STARTING = StatusEnum.POINT_STARTING;\n\t\tthis.POINT_IN_PATH = StatusEnum.POINT_IN_PATH;\n\t}\n\n\t/**\n\t * Building graph of connected vertices and edges\n\t * @param {any} param0 is a optional object comprised of:\n\t *\tfreePointStatus - status of free point\n\t *\tcpuFillColor - CPU point color\n\t */\n\tasync BuildGraph({\n\t\tfreePointStatus = StatusEnum.POINT_FREE_BLUE,\n\t\tcpufillCol: cpuFillColor = 'blue'\n\t\t//, visuals: presentVisually = false\n\t} = {}) {\n\t\tconst graph_points = [], graph_edges = new Map();\n\n\t\tconst isPointOKForPath = function (freePointStatusArr, pt) {\n\t\t\tconst status = pt.GetStatus();\n\n\t\t\tif (freePointStatusArr.includes(status) && pt.GetFillColor() === cpuFillColor)\n\t\t\t\treturn true;\n\t\t\treturn false;\n\t\t};\n\n\t\tconst addPointsAndEdgestoGraph = async function (point, to_x, to_y, x, y) {\n\t\t\tif (to_x >= 0 && to_x < this.m_iGridWidth && to_y >= 0 && to_y < this.m_iGridHeight) {\n\t\t\t\tconst next = await this.m_Points.get(to_y * this.m_iGridWidth + to_x);\n\t\t\t\tif (next && isPointOKForPath([freePointStatus], next) === true) {\n\n\t\t\t\t\tif (graph_edges.has(`${x},${y}_${to_x},${to_y}`) === false && graph_edges.has(`${to_x},${to_y}_${x},${y}`) === false) {\n\n\t\t\t\t\t\tconst edge = {\n\t\t\t\t\t\t\tfrom: point,\n\t\t\t\t\t\t\tto: next\n\t\t\t\t\t\t};\n\t\t\t\t\t\t//if (presentVisually === true) {\n\t\t\t\t\t\t//\tconst line = CreateLine(3, 'rgba(0, 255, 0, 0.3)');\n\t\t\t\t\t\t//\tline.move(x, y, next_pos.x, next_pos.y);\n\t\t\t\t\t\t//\tedge.line = line;\n\t\t\t\t\t\t//}\n\t\t\t\t\t\tgraph_edges.set(`${x},${y}_${to_x},${to_y}`, edge);\n\n\n\t\t\t\t\t\tif (graph_points.includes(point) === false) {\n\t\t\t\t\t\t\tpoint.adjacents = [next];\n\t\t\t\t\t\t\tgraph_points.push(point);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pt = graph_points.find(x => x === point);\n\t\t\t\t\t\t\tpt.adjacents.push(next);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (graph_points.includes(next) === false) {\n\t\t\t\t\t\t\tnext.adjacents = [point];\n\t\t\t\t\t\t\tgraph_points.push(next);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pt = graph_points.find(x => x === next);\n\t\t\t\t\t\t\tpt.adjacents.push(point);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this);\n\n\t\tfor (const point of await this.m_Points.values()) {\n\t\t\tif (point && isPointOKForPath([freePointStatus, this.POINT_STARTING, this.POINT_IN_PATH], point) === true) {\n\t\t\t\tconst { x, y } = point.GetPosition();\n\t\t\t\t//TODO: await all below promises\n\t\t\t\t//east\n\t\t\t\tawait addPointsAndEdgestoGraph(point, x + 1, y, x, y);\n\t\t\t\t//west\n\t\t\t\tawait addPointsAndEdgestoGraph(point, x - 1, y, x, y);\n\t\t\t\t//north\n\t\t\t\tawait addPointsAndEdgestoGraph(point, x, (y - 1), x, y);\n\t\t\t\t//south\n\t\t\t\tawait addPointsAndEdgestoGraph(point, x, (y + 1), x, y);\n\t\t\t\t//north_west\n\t\t\t\tawait addPointsAndEdgestoGraph(point, x - 1, (y - 1), x, y);\n\t\t\t\t//north_east\n\t\t\t\tawait addPointsAndEdgestoGraph(point, x + 1, (y - 1), x, y);\n\t\t\t\t//south_west\n\t\t\t\tawait addPointsAndEdgestoGraph(point, x - 1, (y + 1), x, y);\n\t\t\t\t//south_east\n\t\t\t\tawait addPointsAndEdgestoGraph(point, x + 1, (y + 1), x, y);\n\t\t\t}\n\t\t}\n\t\t//return graph\n\t\treturn { vertices: graph_points, edges: Array.from(graph_edges.values()) };\n\t}\n\n\tasync IsPointOutsideAllPaths(lines, x, y) {\n\t\tfor (const line of lines) {\n\t\t\tconst points = line.GetPointsArray();\n\n\t\t\tif (false !== pnpoly2(points, x, y))\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Based on https://www.geeksforgeeks.org/print-all-the-cycles-in-an-undirected-graph/\n\t * @param {any} graph constructed earlier with BuildGraph\n\t * @param {string} COLOR_BLUE - cpu blue playing color\n\t * @param {string} sHumanColor - human red playing color\n\t * @param {object} lines - line array\n\t * @returns {array} of cycles\n\t */\n\tasync MarkAllCycles(graph, COLOR_BLUE, sHumanColor, lines) {\n\t\tconst vertices = graph.vertices;\n\t\tconst N = vertices.length;\n\t\tlet cycles = new Array(N);\n\t\t// mark with unique numbers\n\t\tconst mark = new Array(N);\n\t\t// arrays required to color the \n\t\t// graph, store the parent of node \n\t\tconst color = new Array(N), par = new Array(N);\n\n\t\tfor (let i = 0; i < N; i++) {\n\t\t\tmark[i] = []; cycles[i] = [];\n\t\t}\n\n\t\tconst dfs_cycle = async function (u, p) {\n\t\t\t// already (completely) visited vertex. \n\t\t\tif (color[u] === 2)\n\t\t\t\treturn;\n\n\t\t\t// seen vertex, but was not completely visited -> cycle detected. \n\t\t\t// backtrack based on parents to find the complete cycle. \n\t\t\tif (color[u] === 1) {\n\t\t\t\tcyclenumber++;\n\t\t\t\tlet cur = p;\n\t\t\t\tmark[cur].push(cyclenumber);\n\n\t\t\t\t// backtrack the vertex which are\n\t\t\t\t// in the current cycle thats found\n\t\t\t\twhile (cur !== u) {\n\t\t\t\t\tcur = par[cur];\n\t\t\t\t\tmark[cur].push(cyclenumber);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpar[u] = p;\n\n\t\t\t// partially visited.\n\t\t\tcolor[u] = 1;\n\t\t\tconst vertex = vertices[u];\n\t\t\tif (vertex) {\n\t\t\t\t\n\t\t\t\t//const x = vertex.attributes.get('cx'), y = vertex.attributes.get('cy');\n\t\t\t\t//vertex.SetStrokeColor('black');\n\t\t\t\t//vertex.SetFillColor('black');\n\t\t\t\t////vertex.setAttribute(\"r\", \"6\");\n\t\t\t\t//await Sleep(10);\n\n\n\t\t\t\t// simple dfs on graph\n\t\t\t\tfor (const adj of vertex.adjacents) {\n\t\t\t\t\tconst v = vertices.indexOf(adj);\n\t\t\t\t\t// if it has not been visited previously\n\t\t\t\t\tif (v === par[u])\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tawait dfs_cycle(v, u);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// completely visited. \n\t\t\tcolor[u] = 2;\n\t\t};\n\n\t\tconst printCycles = async function (edges, mark) {\n\t\t\t// push the edges that into the \n\t\t\t// cycle adjacency list \n\t\t\tfor (let e = 0; e < edges; e++) {\n\t\t\t\tconst mark_e = mark[e];\n\t\t\t\tif (mark_e !== undefined && mark_e.length > 0) {\n\t\t\t\t\tfor (let m = 0; m < mark_e.length; m++) {\n\t\t\t\t\t\tconst found_c = cycles[mark_e[m]];\n\t\t\t\t\t\tif (found_c !== undefined)\n\t\t\t\t\t\t\tfound_c.push(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//sort by point length(only cycles >= 4): first longest cycles, most points\n\t\t\tcycles = cycles.filter(c => c.length >= 4).sort((b, a) => a.length - b.length);\n\n\t\t\t//gather free human player points that could be intercepted.\n\t\t\tconst free_human_player_points = [];\n\t\t\tfor (const pt of await this.m_Points.values()) {\n\t\t\t\tif (pt !== undefined && pt.GetFillColor() === sHumanColor && StatusEnum.POINT_FREE_RED === pt.GetStatus()) {\n\t\t\t\t\tconst { x, y } = pt.GetPosition();\n\t\t\t\t\tif (false === await this.IsPointOutsideAllPaths(lines, x, y))\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t//check if really exists\n\t\t\t\t\t//const pt1 = document.querySelector(`svg > circle[cx=\"${x}\"][cy=\"${y}\"]`);\n\t\t\t\t\t//if (pt1)\n\t\t\t\t\tfree_human_player_points.push({ x, y });\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t//const tab = [];\n\t\t\t// traverse through all the vertices with same cycle\n\t\t\tfor (let i = 0; i <= cyclenumber; i++) {\n\t\t\t\tconst cycl = cycles[i];//get cycle\n\t\t\t\tif (cycl && cycl.length > 0) {\t//some checks\n\t\t\t\t\t// Print the i-th cycle\n\t\t\t\t\t//let str = (`Cycle Number ${i}: `), trailing_points = [];\n\t\t\t\t\t//const rand_color = 'var(--indigo)';\n\n\t\t\t\t\t//convert to logical space\n\t\t\t\t\tconst mapped_verts = cycl.map(function (c) {\n\t\t\t\t\t\treturn vertices[c].GetPosition();\n\t\t\t\t\t}.bind(this));\n\t\t\t\t\t//sort clockwise (https://stackoverflow.com/questions/45660743/sort-points-in-counter-clockwise-in-javascript)\n\t\t\t\t\tconst cw_sorted_verts = sortPointsClockwise(mapped_verts);\n\t\t\t\t\tcycles[i] = { cycl, cw_sorted_verts };\n\t\t\t\t\t////display which cycle we are dealing with\n\t\t\t\t\t//for (const vert of cw_sorted_verts) {\n\t\t\t\t\t//\tconst { x, y } = vert;\n\t\t\t\t\t//\tconst pt = document.querySelector(`svg > circle[cx=\"${x}\"][cy=\"${y}\"]`);\n\t\t\t\t\t//\tif (pt) {//again some basic checks\n\t\t\t\t\t//\t\tstr += (`(${x},${y})`);\n\n\t\t\t\t\t//\t\tpt.SetStrokeColor(rand_color);\n\t\t\t\t\t//\t\tpt.SetFillColor(rand_color);\n\t\t\t\t\t//\t\tpt.setAttribute(\"r\", \"6\");\n\t\t\t\t\t//\t}\n\t\t\t\t\t//\tawait Sleep(50);\n\t\t\t\t\t//}\n\n\t\t\t\t\t//find for all free_human_player_points which cycle might interepct it (surrounds)\n\t\t\t\t\t//only convex, NOT concave :-(\n\t\t\t\t\t//let tmp = '', comma = '';\n\t\t\t\t\t//for (const possible_intercept of free_human_player_points) {\n\t\t\t\t\t//\tif (false !== pnpoly2(cw_sorted_verts, possible_intercept.x, possible_intercept.y)) {\n\t\t\t\t\t//\t\ttmp += `${comma}(${possible_intercept.x},${possible_intercept.y})`;\n\n\t\t\t\t\t//\t\tconst pt1 = document.querySelector(`svg > circle[cx=\"${possible_intercept.x}\"][cy=\"${possible_intercept.y}\"]`);\n\t\t\t\t\t//\t\tif (pt1) {\n\t\t\t\t\t//\t\t\tpt1.SetStrokeColor('var(--yellow)');\n\t\t\t\t\t//\t\t\tpt1.SetFillColor('var(--yellow)');\n\t\t\t\t\t//\t\t\tpt1.setAttribute(\"r\", \"6\");\n\t\t\t\t\t//\t\t}\n\t\t\t\t\t//\t\tcomma = ',';\n\t\t\t\t\t//\t}\n\t\t\t\t\t//}\n\t\t\t\t\t////gaterhing of some data and console printing\n\t\t\t\t\t//trailing_points.unshift(str);\n\t\t\t\t\t//tab.push(trailing_points);\n\t\t\t\t\t////log...\n\t\t\t\t\t//LocalLog(str + (tmp !== '' ? ` possible intercepts: ${tmp}` : ''));\n\t\t\t\t\t////...and clear\n\t\t\t\t\t//const pts2reset = Array.from(document.querySelectorAll(`svg > circle[fill=\"${rand_color}\"][r=\"6\"]`));\n\t\t\t\t\t//pts2reset.forEach(pt => {\n\t\t\t\t\t//\tpt.SetStrokeColor(COLOR_BLUE);\n\t\t\t\t\t//\tpt.SetFillColor(COLOR_BLUE);\n\t\t\t\t\t//\tpt.setAttribute(\"r\", \"4\");\n\t\t\t\t\t//});\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*return tab;*/return { cycles, free_human_player_points, cyclenumber };\n\t\t}.bind(this);\n\n\t\t// store the numbers of cycle\n\t\tlet cyclenumber = 0, edges = N;\n\n\t\t// call DFS to mark the cycles\n\t\tfor (let vind = 0; vind < N; vind++) {\n\t\t\tawait dfs_cycle(vind + 1, vind);//, color, mark, par);\n\t\t}\n\n\t\t// function to print the cycles\n\t\treturn await printCycles(edges, mark);\n\t}\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction concavemanTesting() {\n\tconst precision_points = [[484, 480], [676, 363], [944, 342], [678, 41], [286, 237], [758, 215], [752, 117], [282, 492], [609, 262], [129, 252]];\n\tconst concavity = 2.0, lengthThreshold = 0.0;\n\tconst concaveman_output = concaveman(precision_points, concavity, lengthThreshold);\n\t//console.log('Hello concaveman. Simple test output points: \\n' + JSON.stringify(output));\n\n\n\t// Make sure the polygon has counter-clockwise winding. Skip this step if you know it's already counter-clockwise.\n\t//console.log(`decomp.makeCCW(concavePolygon) => ${decomp.makeCCW(precision_points)}`);\n\t//const convexPolygonsQuick = decomp.quickDecomp(precision_points);\n\t// ==> [  [[1,0],[1,1],[0.5,0.5]],  [[0.5,0.5],[-1,1],[-1,0],[1,0]]  ]\n\t//console.log(`decomp.quickDecomp => ${convexPolygons}`);\n\t// Decompose using the slow (but optimal) algorithm\n\tconst convexPolygons = decomp.decomp(precision_points);\n\t// ==> [  [[-1,1],[-1,0],[1,0],[0.5,0.5]],  [[1,0],[1,1],[0.5,0.5]]  ]\n\t//console.log(`decomp.decomp => ${convexPolygons}`);\n\tif (!concaveman_output || concaveman_output.length <= 0 ||\n\t\t//!convexPolygonsQuick || convexPolygonsQuick.length <= 0 || \n\t\t!convexPolygons || convexPolygons.length <= 0) {\n\t\tLocalLog('decomp or concaveman error');\n\t}\n}\n\nexport { concaveman, GraphAI };\n","﻿import { GraphAI, concaveman } from \"./AISource.js\";\nimport { SvgVml, StatusEnum, LocalLog, LocalError, sortPointsClockwise } from \"./shared.js\";\n\n\n// This is the entry point for our worker\naddEventListener('message', async function (e) {\n\tconst params = e.data;\n\n\tconst svgVml = new SvgVml();\n\tsvgVml.CreateSVGVML(null, null, null, params.boardSize);\n\n\tswitch (params.operation) {\n\t\tcase \"BUILD_GRAPH\":\n\t\t\t{\n\t\t\t\t//debugger;\n\t\t\t\tconst lines = params.paths.map(pa => svgVml.DeserializePolyline(pa));\n\t\t\t\tconst points = new Map();\n\t\t\t\tparams.points.forEach((pt) => {\n\t\t\t\t\tpoints.set(pt.key, svgVml.DeserializeOval(pt.value));\n\t\t\t\t});\n\n\t\t\t\tLocalLog(`lines.count = ${await lines.length}, points.count = ${await points.size}`);\n\n\t\t\t\tconst ai = new GraphAI(params.state.iGridWidth, params.state.iGridHeight, points);\n\t\t\t\tconst graph = await ai.BuildGraph({ freePointStatus: StatusEnum.POINT_FREE_BLUE, cpufillCol: 'blue', visuals: false });\n\t\t\t\t//LocalLog(graph);\n\n\t\t\t\tpostMessage({ operation: params.operation, params: graph });\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"CONCAVEMAN\":\n\t\t\t{\n\t\t\t\tconst points = new Map();\n\t\t\t\tparams.points.forEach((pt) => {\n\t\t\t\t\tpoints.set(pt.key, svgVml.DeserializeOval(pt.value));\n\t\t\t\t});\n\t\t\t\tconst ai = new GraphAI(params.state.iGridWidth, params.state.iGridHeight, points);\n\t\t\t\tconst graph = await ai.BuildGraph({ freePointStatus: StatusEnum.POINT_FREE_BLUE, cpufillCol: 'blue', visuals: false });\n\n\n\t\t\t\tconst vertices = graph.vertices.map(function (pt) {\n\t\t\t\t\tconst { x, y } = pt.GetPosition();\n\t\t\t\t\treturn [x, y];\n\t\t\t\t});\n\t\t\t\tconst convex_hull = concaveman(vertices, 2.0, 0.0);\n\n\t\t\t\tconst mapped_verts = convex_hull.map(([x, y]) => ({ x, y }));\n\t\t\t\tconst cw_sorted_verts = sortPointsClockwise(mapped_verts);\n\n\t\t\t\tpostMessage({ operation: params.operation, convex_hull: convex_hull, cw_sorted_verts: cw_sorted_verts });\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"MARK_ALL_CYCLES\":\n\t\t\t{\n\t\t\t\tconst lines = params.paths.map(pa => svgVml.DeserializePolyline(pa));\n\t\t\t\tconst points = new Map();\n\t\t\t\tparams.points.forEach((pt) => {\n\t\t\t\t\tpoints.set(pt.key, svgVml.DeserializeOval(pt.value));\n\t\t\t\t});\n\t\t\t\tconst ai = new GraphAI(params.state.iGridWidth, params.state.iGridHeight, points);\n\t\t\t\tconst graph = await ai.BuildGraph({ freePointStatus: StatusEnum.POINT_FREE_BLUE, cpufillCol: params.colorBlue, visuals: false });\n\t\t\t\tconst result = await ai.MarkAllCycles(graph, params.colorBlue, params.colorRed, lines);\n\n\n\t\t\t\tpostMessage({\n\t\t\t\t\toperation: params.operation,\n\t\t\t\t\tcycles: result.cycles,\n\t\t\t\t\tfree_human_player_points: result.free_human_player_points,\n\t\t\t\t\tcyclenumber: result.cyclenumber\n\t\t\t\t});\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tLocalError(`unknown params.operation = ${params.operation}`);\n\t\t\tbreak;\n\t}\n});\n\nLocalLog('Worker loaded');\n"],"names":[],"sourceRoot":""}