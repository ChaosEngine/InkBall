@page
@inject Microsoft.Extensions.Options.IOptions<InkBallOptions> commonUIConfigureOptions
@model GameModel
@{
    ViewData["Title"] = "Game";

    HtmlHelpers.RenderHeaderSection(this, Url, commonUIConfigureOptions);


    string P2Name = Model.Game.Player2 != null ? Model.Game.Player2?.User?.UserName : "???";
    string surrender_win_cancel_name;
    bool isThisPlayerActive = Model.Game.IsThisPlayerActive();
    bool useMessagePackBinaryTransport = commonUIConfigureOptions.Value.UseMessagePackBinaryTransport;
    string lastTimeStampISO = @Model.Game.TimeStamp.ToString("O");
    if (Model.Game.Player2 != null)
    {
        if (Model.Game.GetOtherPlayer().IsLastMoveOverdue() && isThisPlayerActive)
        {
            surrender_win_cancel_name = "win";
        }
        else
        {
            surrender_win_cancel_name = "surrender";
        }
    }
    else
    {
        surrender_win_cancel_name = "cancel";
    }
}
<h3 class="inkgame">
    This is Inball Game page
</h3>
<p class="inkgame">
    <!-- Debug State -->
    iGameID=<span id="gameID"></span>
    iPlayerID=<span id="playerID"></span>
    Player=@(Model.Game.IsThisPlayer1() ? "P1" : "P2")
    <span class="whichColor">Play color</span>
</p>
<p class="inkgame">
    @Model.Game.Player1?.User?.UserName vs <span id='Player2Name'>@P2Name</span>
</p>
<div class="container inkgame">
    <form action="GamesList" method="post" asp-antiforgery="true" class="row">
        <input type='hidden' name='GameID' />
        <div class="col-xs-6 col-sm-auto pl-0">
            <a id='Pause' href='GamesList' class="btn btn-outline-primary">pause</a>
            <input id='SurrenderButton' type='submit' name='action' value="@surrender_win_cancel_name" class='btn btn-outline-primary' disabled />
        </div>
        <div class="col-xs-6 col-sm-auto pl-0">
            <input id="StopAndDraw" type="button" value="Stop and Draw" class='btn btn-warning' disabled />
            <input id="CancelPath" type="button" value="Cancel path" class='btn btn-primary' disabled />
        </div>
        <div id="testArea" class="dropdown dropright">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="ddlTest" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Test
            </button>
            <div class="dropdown-menu" aria-labelledby="ddlTest">
                <a class="dropdown-item" href="#" id="TestBuildGraph">Build current graph</a>
                <a class="dropdown-item" href="#" id="TestConcaveman">Concaveman</a>
                <a class="dropdown-item" href="#" id="TestMarkAllCycles">Mark all cycles</a>
                <a class="dropdown-item" href="#" id="TestGroupPoints">Group points recurse</a>
                <a class="dropdown-item" href="#" id="TestFindFullSurroundedPoints">Find full surrounded points</a>
                <a class="dropdown-item" href="#" id="TestWorkerify">Workerify</a>
            </div>
        </div>
    </form>
    <div id="status" class="row">
        <div class="col-auto px-0">
            <span id="gameStatus">•</span>&nbsp;
            <span id="debug0"></span>&nbsp;
            <span id="debug1"></span>&nbsp;
            <span id="debug2"></span>
        </div>
    </div>
    <div class="row mx-auto">
        <div id="screen" class="col-auto p-0 mb-3 mx-auto boardsize-@(Model.Game.iBoardWidth)x@(Model.Game.iBoardHeight)">
        </div>
        <div class="col">
            <div class="input-group">
                <input id="messageInput" type="text" class="form-control" placeholder="Message..." aria-label="Message to send" aria-describedby="sendButton"
                       onkeyup="document.querySelector('#sendButton').disabled = this.value == ''" disabled />
                <div class="input-group-append">
                    <input id="sendButton" type="button" value="Send Message" class="btn btn-secondary" disabled />
                </div>
            </div>
            <ul id="messagesList" class="list-group list-group-flush"></ul>
        </div>
    </div>
</div>

<script nomodule src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.12.1/polyfill.min.js" integrity="sha512-uzOpZ74myvXTYZ+mXUsPhDF+/iL/n32GDxdryI2SJronkEyKC8FBFRLiBQ7l7U/PTYebDbgTtbqTa6/vGtU23A==" crossorigin="anonymous"></script>
<environment include="Development">
    <script src='@Url.Content("~/lib/signalr/dist/browser/signalr.min.js")'></script>
    @if (useMessagePackBinaryTransport)
    {
        @:<script src='@Url.Content("~/lib/msgpack5/dist/msgpack5.min.js")'></script>
        @:<script src='@Url.Content("~/lib/signalr-protocol-msgpack/dist/browser/signalr-protocol-msgpack.min.js")'></script>
    }
</environment>
<environment exclude="Development">
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@5.0.1/dist/browser/signalr.min.js" integrity="sha256-+rjfFXjblzn2o2pRhyBUXYY5C8gbBVszl5GHfeI8oZE=" crossorigin="anonymous"></script>
    @if (useMessagePackBinaryTransport)
    {
        @:<script src="https://cdn.jsdelivr.net/npm/msgpack5@4.4.0/dist/msgpack5.min.js" integrity="sha256-mY/RhkCJfd98j3c5s1EcUDJdRzffTeKzEzFIaI/2KQg=" crossorigin="anonymous"></script>
        @:<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr-protocol-msgpack@5.0.1/dist/browser/signalr-protocol-msgpack.min.js" integrity="sha256-Vu6Oco+sYBWnny8L1WQ3xLzMAOUSIW362OHOnC9BrSc=" crossorigin="anonymous"></script>
    }
</environment>
<script type='text/javascript'>
    gameOptions = {
	    inkBallHubName: '@(commonUIConfigureOptions.Value.AppRootPath + InkBall.Module.Hubs.GameHub.HubName)',
	    iGameID: @Model.Game.iId,
	    iPlayerID: @Model.Player.iId,
	    iOtherPlayerID: parseInt("@Model.Game.GetOtherPlayer()?.iId") || null,
	    bPlayingWithRed: JSON.parse('@Model.Game.IsThisPlayerPlayingWithRed()'.toLowerCase()),
	    bPlayerActive: JSON.parse('@isThisPlayerActive'.toLowerCase()),
	    gameType: '@Model.Game.GameType',
	    protocol: JSON.parse('@useMessagePackBinaryTransport'.toLowerCase()) ? new signalR.protocols.msgpack.MessagePackHubProtocol() : new signalR.JsonHubProtocol(),
	    servTimeoutMillis: @Model.ClientTimeoutInterval.TotalMilliseconds,
	    isReadonly: JSON.parse('@Model.IsReadonly'.toLowerCase()),
        pathAfterPointDrawAllowanceSecAmount: @Constants.PathAfterPointDrawAllowanceSecAmount,
        sLastMoveGameTimeStamp: '@lastTimeStampISO',
        version: '@this.GetType().Assembly.GetName().Version.ToString(4)',

	    @if(Model.PlayerPointsAndPaths.Points != null)
	    {
            @:PointsAsJavaScriptArray: @Model.PointsAsJavaScriptArray,
            @:PathsAsJavaScriptArray: @Model.PathsAsJavaScriptArray,
	    }
        else
        {
            @:PointsAsJavaScriptArray: null,
            @:PathsAsJavaScriptArray: null
        }
    };
</script>
<script type='module' src='@Url.Content(Constants.WwwIncludeInkballJS)'></script>
<script nomodule type='text/javascript' src='@Url.Content(Constants.WwwIncludeInkballJSBundle)'></script>
