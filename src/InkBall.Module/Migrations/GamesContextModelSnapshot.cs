// <auto-generated />
using System;
using InkBall.Module;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InkBall.Module.Migrations
{
    [DbContext(typeof(GamesContext))]
    partial class GamesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("InkBall.Module.InkBallGame", b =>
                {
                    b.Property<uint>("iId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("GameState")
                        .IsRequired();

                    b.Property<string>("GameType")
                        .IsRequired();

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'CURRENT_TIMESTAMP'");

                    b.Property<byte>("bIsPlayer1Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bIsPlayer1Active")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("iBoardHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iBoardHeight")
                        .HasDefaultValueSql("'800'");

                    b.Property<uint>("iBoardWidth")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iBoardWidth")
                        .HasDefaultValueSql("'600'");

                    b.Property<uint>("iGridSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iGridSize")
                        .HasDefaultValueSql("'15'");

                    b.Property<uint>("iPlayer1Id")
                        .HasColumnName("iPlayer1ID");

                    b.Property<uint?>("iPlayer2Id")
                        .HasColumnName("iPlayer2ID");

                    b.HasKey("iId");

                    b.HasIndex("iPlayer1Id")
                        .HasName("ByPlayer1");

                    b.HasIndex("iPlayer2Id")
                        .HasName("ByPlayer2");

                    b.ToTable("InkBallGame");
                });

            modelBuilder.Entity("InkBall.Module.InkBallPath", b =>
                {
                    b.Property<uint>("iId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iID");

                    b.Property<uint>("iGameId")
                        .HasColumnName("iGameID");

                    b.Property<uint>("iPlayerId")
                        .HasColumnName("iPlayerID");

                    b.HasKey("iId");

                    b.HasIndex("iGameId")
                        .HasName("PathByGame");

                    b.HasIndex("iPlayerId")
                        .HasName("PathByPlayer");

                    b.ToTable("InkBallPath");
                });

            modelBuilder.Entity("InkBall.Module.InkBallPlayer", b =>
                {
                    b.Property<uint>("iId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iID");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'CURRENT_TIMESTAMP'");

                    b.Property<int>("iDrawCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iDrawCount")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("iLossCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iLossCount")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<long?>("iUserId")
                        .HasColumnName("iUserID")
                        .HasColumnType("bigint(10)");

                    b.Property<int>("iWinCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iWinCount")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("sLastMoveCode")
                        .HasColumnName("sLastMoveCode")
                        .HasColumnType("varchar(1000)");

                    b.HasKey("iId");

                    b.HasIndex("iUserId")
                        .HasName("ByUser");

                    b.ToTable("InkBallPlayer");
                });

            modelBuilder.Entity("InkBall.Module.InkBallPoint", b =>
                {
                    b.Property<uint>("iId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iID");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<uint?>("iEnclosingPathId")
                        .HasColumnName("iEnclosingPathID");

                    b.Property<uint>("iGameId")
                        .HasColumnName("iGameID");

                    b.Property<uint>("iPlayerId")
                        .HasColumnName("iPlayerID");

                    b.Property<uint>("iX")
                        .HasColumnName("iX");

                    b.Property<uint>("iY")
                        .HasColumnName("iY");

                    b.HasKey("iId");

                    b.HasIndex("iEnclosingPathId")
                        .HasName("ByEnclosingPath");

                    b.HasIndex("iGameId")
                        .HasName("PointByGame");

                    b.HasIndex("iPlayerId")
                        .HasName("PointByPlayer");

                    b.ToTable("InkBallPoint");
                });

            modelBuilder.Entity("InkBall.Module.InkBallPointsInPath", b =>
                {
                    b.Property<uint>("iId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iID");

                    b.Property<uint>("iPathId")
                        .HasColumnName("iPathID");

                    b.Property<uint>("iPointId")
                        .HasColumnName("iPointID");

                    b.HasKey("iId");

                    b.HasIndex("iPathId")
                        .HasName("ByPath");

                    b.HasIndex("iPointId")
                        .HasName("ByPoint");

                    b.ToTable("InkBallPointsInPath");
                });

            modelBuilder.Entity("InkBall.Module.Users", b =>
                {
                    b.Property<uint>("iId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iID");

                    b.Property<string>("haslo")
                        .IsRequired()
                        .HasColumnName("haslo")
                        .HasColumnType("varchar(20)");

                    b.Property<sbyte>("iPrivileges")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("iPrivileges")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<long>("id")
                        .HasColumnName("id")
                        .HasColumnType("bigint(4)");

                    b.Property<string>("ksywa")
                        .IsRequired()
                        .HasColumnName("ksywa")
                        .HasColumnType("char(15)");

                    b.Property<string>("poczta")
                        .IsRequired()
                        .HasColumnName("poczta")
                        .HasColumnType("varchar(40)");

                    b.Property<int>("potwierdzenie")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("potwierdzenie")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("sName")
                        .HasColumnName("sName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("sPassword")
                        .IsRequired()
                        .HasColumnName("sPassword")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("sPasswordSalt")
                        .IsRequired()
                        .HasColumnName("sPasswordSalt")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("sSurname")
                        .HasColumnName("sSurname")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("sUserName")
                        .IsRequired()
                        .HasColumnName("sUserName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("iId");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasName("id");

                    b.HasIndex("poczta", "haslo", "potwierdzenie")
                        .HasName("ByCheckersLoginFields");

                    b.ToTable("users");
                });

            modelBuilder.Entity("InkBall.Module.InkBallGame", b =>
                {
                    b.HasOne("InkBall.Module.InkBallPlayer", "Player1")
                        .WithMany("InkBallGameIPlayer1")
                        .HasForeignKey("iPlayer1Id")
                        .HasConstraintName("InkBallGame_ibfk_1");

                    b.HasOne("InkBall.Module.InkBallPlayer", "Player2")
                        .WithMany("InkBallGameIPlayer2")
                        .HasForeignKey("iPlayer2Id")
                        .HasConstraintName("InkBallGame_ibfk_2");
                });

            modelBuilder.Entity("InkBall.Module.InkBallPath", b =>
                {
                    b.HasOne("InkBall.Module.InkBallGame", "Game")
                        .WithMany("InkBallPath")
                        .HasForeignKey("iGameId")
                        .HasConstraintName("InkBallPath_ibfk_1");

                    b.HasOne("InkBall.Module.InkBallPlayer", "Player")
                        .WithMany("InkBallPath")
                        .HasForeignKey("iPlayerId")
                        .HasConstraintName("InkBallPath_ibfk_2");
                });

            modelBuilder.Entity("InkBall.Module.InkBallPlayer", b =>
                {
                    b.HasOne("InkBall.Module.Users", "User")
                        .WithMany("InkBallPlayer")
                        .HasForeignKey("iUserId")
                        .HasConstraintName("InkBallPlayer_ibfk_1")
                        .HasPrincipalKey("id");
                });

            modelBuilder.Entity("InkBall.Module.InkBallPoint", b =>
                {
                    b.HasOne("InkBall.Module.InkBallPath", "EnclosingPath")
                        .WithMany("InkBallPoint")
                        .HasForeignKey("iEnclosingPathId")
                        .HasConstraintName("InkBallPoint_ibfk_5");

                    b.HasOne("InkBall.Module.InkBallGame", "Game")
                        .WithMany("InkBallPoint")
                        .HasForeignKey("iGameId")
                        .HasConstraintName("InkBallPoint_ibfk_3");

                    b.HasOne("InkBall.Module.InkBallPlayer", "Player")
                        .WithMany("InkBallPoint")
                        .HasForeignKey("iPlayerId")
                        .HasConstraintName("InkBallPoint_ibfk_4");
                });

            modelBuilder.Entity("InkBall.Module.InkBallPointsInPath", b =>
                {
                    b.HasOne("InkBall.Module.InkBallPath", "Path")
                        .WithMany("InkBallPointsInPath")
                        .HasForeignKey("iPathId")
                        .HasConstraintName("InkBallPointsInPath_ibfk_1");

                    b.HasOne("InkBall.Module.InkBallPoint", "Point")
                        .WithMany("InkBallPointsInPath")
                        .HasForeignKey("iPointId")
                        .HasConstraintName("InkBallPointsInPath_ibfk_2");
                });
#pragma warning restore 612, 618
        }
    }
}
