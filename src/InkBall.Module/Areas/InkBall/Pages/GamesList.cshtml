@page
@using InkBall.Module.Model
@inject Microsoft.Extensions.Options.IOptions<InkBallOptions> commonUIConfigureOptions
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService authorization
@model GamesListModel
@{
    ViewData["Title"] = "Game list";

    HtmlHelpers.RenderHeaderSection(this, Url, commonUIConfigureOptions);

	var bIsCurrentGameOk = Model.Game != null;
}

<div class="alert alert-dismissible fade show d-none inkgames" role="alert">
	<span>@Model.Message</span>
	<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<div class='container inkgames'>
	<div class="table-responsive">
		<a href='Home' class='btn btn-outline-primary mt-4 m-sm-1'>Home</a>
		<table class='table game_tab'>
			<thead>
				<tr>
					<th scope='row'>#</th>
					<th scope='col'>Player 1</th>
					<th scope='col'>Player 2</th>
					<th scope='col'>Game state</th>
					<th scope='col'>Action</th>
					<th scope='col'>Game type</th>
				</tr>
			</thead>
			<tbody>
			@if(Model.GamesList?.Count() > 0)
			{
				var sExternalUserID = Model.Player.sExternalId;
    			var bCanViewOtherPlayerGames = (await authorization.AuthorizeAsync(User, null, Constants.InkBallViewOtherGamesPolicyName)).Succeeded;
				foreach (var game in Model.GamesList)
				{
					<tr>
						<th scope='row'>@game.iId</th>
						<td class='gtd'>@game.Player1.UserName</td>
						<td class='gtd'>@game?.Player2?.UserName</td>
						@{
							bool bIsMyOwnGame;
							if (bIsCurrentGameOk &&
								(game.Player1.sExternalId == sExternalUserID ||
								(game?.Player2 != null && game.Player2.sExternalId == sExternalUserID)))
							{
								bIsMyOwnGame = true;
							}
							else
							{
								bIsMyOwnGame = false;
							}

							switch (game.GameState)
							{
								case InkBallGame.GameStateEnum.AWAITING:
									<td class='fst-italic gtd'>waiting for another player</td>
									<td class='gtd'>
										@if (bIsMyOwnGame)
										{
											<a href='Game' class='btn btn-outline-primary'>Continue</a>
										}
										else if (!bIsCurrentGameOk)
										{
											<form method='post'>
												<input type='hidden' name='GameID' value='@game.iId' />
												<input type='submit' name='action' value='Join' class='btn btn-outline-primary' />
											</form>
										}
									</td>
									break;

								case InkBallGame.GameStateEnum.ACTIVE:
									<td class='fst-italic gtd'>game in progress</td>
									<td class='gtd'>
										@if (bIsMyOwnGame)
										{
											<a href='Game' class="btn btn-outline-primary">Continue</a>
										}
										else if (!bIsCurrentGameOk && bCanViewOtherPlayerGames)
										{
											<a href='Game?handler=View&GameID=@game.iId'>View only</a>
										}
									</td>
									break;

								case InkBallGame.GameStateEnum.INACTIVE:
									<td class='fst-italic gtd' colspan="2">game inactive</td>
									break;
								case InkBallGame.GameStateEnum.FINISHED:
									<td class='fst-italic gtd' colspan="2">game finished</td>
									break;
								default:
									throw new ArgumentNullException(nameof(game.GameState), "bad game state");
							}

							switch (game.GameType)
							{
								case InkBallGame.GameTypeEnum.FIRST_5_ADVANTAGE_PATHS:
									<td class='fst-italic gtd'>FIRST 5 ADVANTAGE PATHS</td>
									break;
								case InkBallGame.GameTypeEnum.FIRST_5_CAPTURES:
									<td class='fst-italic gtd'>FIRST 5 CAPTURES</td>
									break;
								case InkBallGame.GameTypeEnum.FIRST_5_PATHS:
									<td class='fst-italic gtd'>FIRST 5 PATHS</td>
									break;
								case InkBallGame.GameTypeEnum.FIRST_CAPTURE:
									<td class='fst-italic gtd'>FIRST CAPTURE</td>
									break;
								default:
									throw new ArgumentNullException(nameof(game.GameType), "bad game type");
							}
						}
					</tr>
				}
			}
			else
			{
				<tr>
					<td colspan="6" class="h4 p-3 text-center gtd-nogame">
						<span>↓↓↓</span> No games, create below
					</td>
				</tr>
			}
			</tbody>
		</table>
	</div>
	@if (!bIsCurrentGameOk)
	{
	<form method='post' class="was-validated">
		<fieldset class="g-3">
			<legend class="col-sm-12 col-md-4 col-lg-4 col-xl-3">New game creation</legend>
			<div class="row" role="group" aria-label="New game options">
				<div class="col-sm-12 col-md-4 col-lg-4 col-xl-3">
					<select name='GameType' id='GameType' class="form-select" required>
						<option value='' selected='selected'>Choose game type</option>
						<optgroup label='Game types'>
							<option value='0'>First capture wins</option>
							<option value='1'>First 5 captures wins</option>
							<option value='2'>First 5 paths wins</option>
							<option value='3'>Advantage of 5 paths wins</option>
						</optgroup>
					</select>
					<div class="invalid-feedback">Invalid game type</div>
				</div>
				<div class="col-sm-12 col-md-4 col-lg-4 col-xl-3">
					<select name='BoardSize' id='BoardSize' class="form-select" required>
						<option value='' selected='selected'>Choose board size</option>
						<optgroup label='Board sizes'>
							<option value='20'>20 x 26</option>
							<option value='40'>40 x 52</option>
							<option value='64'>64 x 64</option>
						</optgroup>
					</select>
					<div class="invalid-feedback">Invalid bard size</div>
				</div>
				<div class="col-sm-12 col-md-auto col-xl-3 form-check form-switch ps-2">
					<input type="checkbox" class="form-check-input form-control-input mx-1" name="CpuOponent" id="CpuOponent" />
					<label class="form-check-label" for="CpuOponent">Play against CPU</label>
				</div>
				<div class="col-sm-12 col-md-auto">
					<input type='submit' name='action' value='New game' class='btn btn-primary' />
				</div>
			</div>
		</fieldset>
	</form>
	}
</div>

<script type='module'>
	import { ListOnLoad } from "@Url.Content(Constants.WwwIncludeInkballJS)";

	ListOnLoad();
</script>